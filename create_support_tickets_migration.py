#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backend'))

from sqlalchemy import create_engine, text, MetaData, Table, Column, Integer, String, DateTime, Text, Boolean, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from app.database import SQLALCHEMY_DATABASE_URL

def create_support_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π"""
    engine = create_engine(SQLALCHEMY_DATABASE_URL)
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã support_tickets
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name='support_tickets'
            """))
            if result.fetchone():
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ support_tickets —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã support_tickets...")
                conn.execute(text("""
                    CREATE TABLE support_tickets (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        title VARCHAR NOT NULL,
                        description TEXT NOT NULL,
                        department VARCHAR,
                        status VARCHAR DEFAULT 'open',
                        priority VARCHAR DEFAULT 'medium',
                        assigned_to INTEGER,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        resolved_at DATETIME,
                        closed_at DATETIME,
                        first_response_at DATETIME,
                        estimated_resolution DATETIME,
                        FOREIGN KEY (user_id) REFERENCES users (id),
                        FOREIGN KEY (assigned_to) REFERENCES users (id)
                    )
                """))
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ support_tickets —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã support_events
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name='support_events'
            """))
            if result.fetchone():
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ support_events —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã support_events...")
                conn.execute(text("""
                    CREATE TABLE support_events (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        ticket_id INTEGER NOT NULL,
                        event_type VARCHAR NOT NULL,
                        title VARCHAR NOT NULL,
                        description TEXT,
                        event_date DATETIME NOT NULL,
                        is_completed BOOLEAN DEFAULT 0,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (ticket_id) REFERENCES support_tickets (id)
                    )
                """))
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ support_events —Å–æ–∑–¥–∞–Ω–∞")
        
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False
    
    return True

if __name__ == "__main__":
    create_support_tables() 