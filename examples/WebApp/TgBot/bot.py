import os
import logging
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import ContentType, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from PIL import Image, ImageEnhance, ImageFilter
import pytesseract
import asyncio
from aiogram.filters import Command
import numpy as np
import requests
import base64
from openai import OpenAI
from datetime import datetime
import uuid
import aiohttp
from asyncio import Semaphore
import re

VSEGPT_API_KEY = 'sk-or-vv-e3624330b439fc1e353cb8ce00b513a845cc0e6964c4bec285412a2c6bdc46d3'
API_TOKEN = '7021261890:AAHqWyZb1CAr_Xw7u35C-pyGBJZuisafa_Y'

# –ï—Å–ª–∏ tesseract –Ω–µ –≤ PATH, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
if os.name == 'posix':
    pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'
# –î–ª—è Windows (–ª–æ–∫–∞–ª—å–Ω–æ)
else:
    pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 5158, –¥–ª—è Docker - 8080
API_URL = os.getenv("API_URL", "http://localhost:8080/api/ocrphoto")

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
MAX_CONCURRENT_PROCESSING = 2
processing_semaphore = Semaphore(MAX_CONCURRENT_PROCESSING)

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
processing_queue = asyncio.Queue()

# –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
processed_count = 0
total_count = 0

user_data = {}
waiting_for_phone = {}
waiting_for_city = {}
waiting_for_birth_date = {}
waiting_for_car = {}
waiting_for_spouse = {}
waiting_for_children = {}
waiting_for_email = {}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
    ],
    resize_keyboard=True
)

def get_additional_info_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")],
            [KeyboardButton(text="üìß –î–æ–±–∞–≤–∏—Ç—å –ø–æ—á—Ç—É")],
            [KeyboardButton(text="üìç –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥")],
            [KeyboardButton(text="üöó –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å")],
            [KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")],
        ],
        resize_keyboard=True
    )
    return keyboard

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
@router.message(Command(commands=["start", "help"]))
async def send_welcome(message: types.Message):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤–∏–∑–∏—Ç–æ–∫!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∏–∑–∏—Ç–∫–∏ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é:\n"
        "\nüì∑ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ</b> ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–∑–∏—Ç–∫—É\n"
        "üìä <b>–°—Ç–∞—Ç—É—Å</b> ‚Äî —É–∑–Ω–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b> ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
    )
    await message.answer(text, reply_markup=main_menu, parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
@router.message(lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_message(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?</b>\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ</b> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∏–∑–∏—Ç–∫–∏.\n"
        "2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.\n"
        "3. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.\n\n",
        parse_mode="HTML",
        reply_markup=main_menu
    )

@router.message(lambda m: m.text == "üìä –°—Ç–∞—Ç—É—Å")
async def status_message(message: types.Message):
    global total_count, processed_count
    queue_size = processing_queue.qsize()
    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>\n"
        f"üì∏ –í—Å–µ–≥–æ –ø—Ä–∏–Ω—è—Ç–æ: {total_count}\n"
        f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}\n"
        f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: {queue_size}\n"
        f"üîÑ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {MAX_CONCURRENT_PROCESSING}",
        parse_mode="HTML",
        reply_markup=main_menu
    )

@router.message(lambda m: m.text == "üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
async def ask_for_photo(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∏–∑–∏—Ç–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=ReplyKeyboardRemove()
    )

def extract_email_from_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç email –∞–¥—Ä–µ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    match = re.search(email_pattern, text)
    return match.group(0) if match else None

def extract_phone_from_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    phone_patterns = [
        r'\+7\s*\(?(\d{3})\)?\s*(\d{3})[-\s]?(\d{2})[-\s]?(\d{2})',  # +7 (999) 123-45-67
        r'8\s*\(?(\d{3})\)?\s*(\d{3})[-\s]?(\d{2})[-\s]?(\d{2})',   # 8 (999) 123-45-67
        r'(\d{3})[-\s]?(\d{3})[-\s]?(\d{2})[-\s]?(\d{2})',          # 999 123-45-67
        r'\+7\s*(\d{10})',                                            # +7 9991234567
        r'8\s*(\d{10})',                                              # 8 9991234567
    ]
    
    for pattern in phone_patterns:
        match = re.search(pattern, text)
        if match:
            if pattern.startswith(r'\+7\s*\(?(\d{3})\)?\s*(\d{3})[-\s]?(\d{2})[-\s]?(\d{2})'):
                # –§–æ—Ä–º–∞—Ç +7 (999) 123-45-67
                return f"+7 ({match.group(1)}) {match.group(2)}-{match.group(3)}-{match.group(4)}"
            elif pattern.startswith(r'8\s*\(?(\d{3})\)?\s*(\d{3})[-\s]?(\d{2})[-\s]?(\d{2})'):
                # –§–æ—Ä–º–∞—Ç 8 (999) 123-45-67
                return f"+7 ({match.group(1)}) {match.group(2)}-{match.group(3)}-{match.group(4)}"
            elif pattern.startswith(r'(\d{3})[-\s]?(\d{3})[-\s]?(\d{2})[-\s]?(\d{2})'):
                # –§–æ—Ä–º–∞—Ç 999 123-45-67
                return f"+7 ({match.group(1)}) {match.group(2)}-{match.group(3)}-{match.group(4)}"
            elif pattern.startswith(r'\+7\s*(\d{10})'):
                # –§–æ—Ä–º–∞—Ç +7 9991234567
                digits = match.group(1)
                return f"+7 ({digits[:3]}) {digits[3:6]}-{digits[6:8]}-{digits[8:]}"
            elif pattern.startswith(r'8\s*(\d{10})'):
                # –§–æ—Ä–º–∞—Ç 8 9991234567
                digits = match.group(1)
                return f"+7 ({digits[:3]}) {digits[3:6]}-{digits[6:8]}-{digits[8:]}"
    
    return None

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ---
async def process_photo_async(message: types.Message, photo, temp_file):
    global processed_count
    async with processing_semaphore:
        try:
            if not os.path.exists(temp_file):
                await message.reply("–û—à–∏–±–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            image = Image.open(temp_file)
            image = image.convert('L')
            image = ImageEnhance.Contrast(image).enhance(2)
            image = image.filter(ImageFilter.SHARPEN)
            base_width = 1000
            wpercent = (base_width / float(image.size[0]))
            hsize = int((float(image.size[1]) * float(wpercent)))
            image = image.resize((base_width, hsize), Image.LANCZOS)
            image = adaptive_threshold(image)

            custom_config = r'--oem 3 --psm 6 -c tessedit_char_whitelist=–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–ØabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@.-+()'
            text = pytesseract.image_to_string(image, lang='rus+eng', config=custom_config)
            
            vsegpt_text = await vsegpt_vision(temp_file, text)
            
            if vsegpt_text and vsegpt_text.strip():
                processed_count += 1
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                auto_email = extract_email_from_text(vsegpt_text)
                auto_phone = extract_phone_from_text(vsegpt_text)
                
                try:
                    api_response = await send_to_api(
                        telegram_user_id=message.from_user.id,
                        file_id=photo.file_id,
                        extracted_text=vsegpt_text,
                        image_path=temp_file,
                        email=auto_email,
                        representative_phone=auto_phone
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞
                    print(f"API Response: {api_response}")
                    is_updated = api_response.get('IsUpdated') or api_response.get('isUpdated')
                    print(f"Is Updated: {is_updated}")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    info_message = f"‚úÖ –í–æ—Ç —á—Ç–æ —è —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:\n{vsegpt_text}\n\n"
                    
                    if auto_email:
                        info_message += f"üìß Email –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω: {auto_email}\n"
                    if auto_phone:
                        info_message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω: {auto_phone}\n"
                    
                    if api_response and is_updated:
                        info_message = f"üîÑ {api_response.get('Message', '–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞')}\n\n" + info_message
                    else:
                        info_message = f"‚úÖ {api_response.get('Message', '–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å')}\n\n" + info_message
                    
                    await message.reply(
                        info_message,
                        reply_markup=get_additional_info_keyboard()
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_data –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                    user_data[message.from_user.id] = {
                        "file_id": photo.file_id,
                        "text": vsegpt_text,
                        "email": auto_email,
                        "phone": auto_phone
                    }
                except Exception as api_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ API: {api_error}")
                    await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É.", reply_markup=main_menu)
            else:
                await message.reply("‚ùå –Ø –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.", reply_markup=main_menu)
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}", reply_markup=main_menu)
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        finally:
            try:
                if os.path.exists(temp_file):
                    os.remove(temp_file)
                    print(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {temp_file}: {e}")

@router.message(lambda message: message.photo is not None)
async def handle_photo(message: types.Message):
    global total_count
    total_count += 1
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    file_path = file_info.file_path
    file = await bot.download_file(file_path)
    unique_id = str(uuid.uuid4())
    temp_file = f'temp_photo_{unique_id}.jpg'
    try:
        with open(temp_file, 'wb') as f:
            f.write(file.read())
        await processing_queue.put((message, photo, temp_file))
        await message.reply(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=main_menu)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}", reply_markup=main_menu)
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
@router.message(lambda message: message.text and not message.text.startswith('/') and not message.text in [
    "üìû –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", "üìß –î–æ–±–∞–≤–∏—Ç—å –ø–æ—á—Ç—É", "üìç –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", "üéÇ –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", 
    "üöó –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", "üíç –î–æ–±–∞–≤–∏—Ç—å —Å–µ–º—å—é", "üë∂ –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–µ–π", "‚úÖ –ì–æ—Ç–æ–≤–æ",
    "üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", "üìä –°—Ç–∞—Ç—É—Å", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
])
async def handle_text_input(message: types.Message):
    user_id = message.from_user.id
    
    if waiting_for_phone.get(user_id):
        await handle_phone_input(message)
    elif waiting_for_email.get(user_id):
        await handle_email_input(message)
    elif waiting_for_city.get(user_id):
        await handle_city_input(message)
    elif waiting_for_birth_date.get(user_id):
        await handle_birth_date_input(message)
    elif waiting_for_car.get(user_id):
        await handle_car_input(message)
    elif waiting_for_spouse.get(user_id):
        await handle_spouse_input(message)
    elif waiting_for_children.get(user_id):
        await handle_children_count_input(message)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
@router.message(lambda m: m.text == "‚úÖ –ì–æ—Ç–æ–≤–æ")
async def finish_input(message: types.Message):
    user_id = message.from_user.id
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data.pop(user_id, None)
    waiting_for_phone.pop(user_id, None)
    waiting_for_email.pop(user_id, None)
    waiting_for_city.pop(user_id, None)
    waiting_for_birth_date.pop(user_id, None)
    waiting_for_car.pop(user_id, None)
    waiting_for_spouse.pop(user_id, None)
    waiting_for_children.pop(user_id, None)
    
    await message.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=main_menu)

@router.message(lambda m: m.text == "üìû –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def add_phone(message: types.Message):
    print(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
    if user_data.get(user_id, {}).get("phone"):
        await message.answer(
            f"üìû –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω: {user_data[user_id]['phone']}\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä:",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=ReplyKeyboardRemove())
    
    waiting_for_phone[user_id] = True

@router.message(lambda m: m.text == "üìß –î–æ–±–∞–≤–∏—Ç—å –ø–æ—á—Ç—É")
async def add_email(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π email
    if user_data.get(user_id, {}).get("email"):
        await message.answer(
            f"üìß –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å email: {user_data[user_id]['email']}\n\n"
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å:", reply_markup=ReplyKeyboardRemove())
    
    waiting_for_email[user_id] = True

@router.message(lambda m: m.text == "üìç –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥")
async def add_city(message: types.Message):
    waiting_for_city[message.from_user.id] = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=ReplyKeyboardRemove())

@router.message(lambda m: m.text == "üéÇ –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
async def add_birth_date(message: types.Message):
    waiting_for_birth_date[message.from_user.id] = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=ReplyKeyboardRemove())

@router.message(lambda m: m.text == "üöó –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å")
async def add_car(message: types.Message):
    waiting_for_car[message.from_user.id] = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: BMW A123BC):", reply_markup=ReplyKeyboardRemove())

@router.message(lambda m: m.text == "üíç –î–æ–±–∞–≤–∏—Ç—å —Å–µ–º—å—é")
async def add_family(message: types.Message):
    waiting_for_spouse[message.from_user.id] = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—É–ø—Ä—É–≥–∞/—Å—É–ø—Ä—É–≥–∏:", reply_markup=ReplyKeyboardRemove())

@router.message(lambda m: m.text == "üë∂ –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–µ–π")
async def add_children(message: types.Message):
    waiting_for_children[message.from_user.id] = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:", reply_markup=ReplyKeyboardRemove())

async def handle_phone_input(message: types.Message):
    phone = message.text
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–æ—Ç –∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω, —á—Ç–æ –∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if phone == user_data[user_id].get("phone"):
        await message.answer("–≠—Ç–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=get_additional_info_keyboard())
        waiting_for_phone.pop(user_id, None)
        return
    
    user_data[user_id]["phone"] = phone
    await send_to_api(
        telegram_user_id=user_id,
        file_id=user_data[user_id]["file_id"],
        extracted_text=user_data[user_id]["text"],
        image_path=None,  # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        representative_phone=phone
    )
    waiting_for_phone.pop(user_id, None)
    await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_additional_info_keyboard())

async def handle_email_input(message: types.Message):
    email = message.text
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–æ—Ç –∂–µ email, —á—Ç–æ –∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if email == user_data[user_id].get("email"):
        await message.answer("–≠—Ç–æ—Ç email —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=get_additional_info_keyboard())
        waiting_for_email.pop(user_id, None)
        return
    
    user_data[user_id]["email"] = email
    await send_to_api(
        telegram_user_id=user_id,
        file_id=user_data[user_id]["file_id"],
        extracted_text=user_data[user_id]["text"],
        image_path=None,  # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        email=email
    )
    waiting_for_email.pop(user_id, None)
    await message.answer("Email –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_additional_info_keyboard())

async def handle_city_input(message: types.Message):
    city = message.text
    user_id = message.from_user.id
    user_data[user_id]["city"] = city
    await send_to_api(
        telegram_user_id=user_id,
        file_id=user_data[user_id]["file_id"],  # —Ç–æ—Ç –∂–µ file_id!
        extracted_text=user_data[user_id]["text"],
        image_path=None,
        city=city
    )
    waiting_for_city.pop(user_id, None)
    await message.answer("–ì–æ—Ä–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_additional_info_keyboard())

async def handle_birth_date_input(message: types.Message):
    birth_date = message.text
    user_id = message.from_user.id
    user_data[user_id]["birth_date"] = birth_date
    await send_to_api(
        telegram_user_id=user_id,
        file_id=user_data[user_id]["file_id"],
        extracted_text=user_data[user_id]["text"],
        image_path=None,
        birth_date=birth_date
    )
    waiting_for_birth_date.pop(user_id, None)
    await message.answer("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_additional_info_keyboard())

async def handle_car_input(message: types.Message):
    car_info = message.text
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –º–∞—Ä–∫—É –∏ –Ω–æ–º–µ—Ä
    parts = car_info.split()
    car_brand = parts[0] if len(parts) > 0 else car_info
    car_number = parts[1] if len(parts) > 1 else None
    
    user_id = message.from_user.id
    user_data[user_id]["car_brand"] = car_brand
    user_data[user_id]["car_number"] = car_number
    
    await send_to_api(
        telegram_user_id=user_id,
        file_id=user_data[user_id]["file_id"],
        extracted_text=user_data[user_id]["text"],
        image_path=None,
        car_brand=car_brand,
        car_number=car_number
    )
    waiting_for_car.pop(user_id, None)
    await message.answer("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_additional_info_keyboard())

async def handle_spouse_input(message: types.Message):
    spouse_name = message.text
    user_id = message.from_user.id
    user_data[user_id]["spouse_name"] = spouse_name
    
    await send_to_api(
        telegram_user_id=user_id,
        file_id=user_data[user_id]["file_id"],
        extracted_text=user_data[user_id]["text"],
        image_path=None,
        is_married=True,
        spouse_full_name=spouse_name
    )
    waiting_for_spouse.pop(user_id, None)
    await message.answer("–°–µ–º–µ–π–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_additional_info_keyboard())

async def handle_children_count_input(message: types.Message):
    try:
        children_count = int(message.text)
        user_id = message.from_user.id
        user_data[user_id]["children_count"] = children_count
        
        await send_to_api(
            telegram_user_id=user_id,
            file_id=user_data[user_id]["file_id"],
            extracted_text=user_data[user_id]["text"],
            image_path=None,
            has_children=True,
            children_count=children_count
        )
        waiting_for_children.pop(user_id, None)
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ç—è—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_additional_info_keyboard())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:", reply_markup=ReplyKeyboardRemove())

def adaptive_threshold(image, block_size=15, C=10):
    img = np.array(image)
    mean = np.mean(img)
    img = 255 * (img > mean - C)
    return Image.fromarray(img.astype(np.uint8))

def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode("utf-8")

async def vsegpt_vision(image_path, ocr_text):
    client = OpenAI(
        api_key=VSEGPT_API_KEY,
        base_url="https://api.vsegpt.ru/v1",
    )
    base64_image = encode_image(image_path)
    messages = [
        {
            "role": "user",
            "content": [
                {"type": "text", "text": f"–í–æ—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–±—ã—á–Ω—ã–º OCR:\n{ocr_text}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏ –∏ –∏—Å–ø—Ä–∞–≤—å –µ–≥–æ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤–∏–∑–∏—Ç–∫–∏. –¢–æ–ª—å–∫–æ –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –∏–∑–º–µ–Ω–∏–ª, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç."},
                {
                    "type": "image_url",
                    "image_url": f"data:image/jpeg;base64,{base64_image}",
                },
            ],
        }
    ]
    response = client.chat.completions.create(
        model="vis-google/gemini-flash-1.5",
        messages=messages,
        max_tokens=400,
    )
    return response.choices[0].message.content

async def send_to_api(
    telegram_user_id,
    file_id,
    extracted_text,
    image_path=None,
    representative_phone=None,
    email=None,
    city=None,
    birth_date=None,
    car_brand=None,
    car_number=None,
    is_married=False,
    spouse_full_name=None,
    spouse_birth_date=None,
    has_children=False,
    children_count=None,
    children=None
):
    url = API_URL  # –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ API
    image_base64 = None
    if image_path:
        with open(image_path, "rb") as img_file:
            image_base64 = base64.b64encode(img_file.read()).decode("utf-8")
    def to_iso(dt):
        if dt is None:
            return None
        if isinstance(dt, str):
            return dt
        return dt.isoformat()
    children_payload = []
    if children:
        for c in children:
            child = {
                "Name": c.get("Name"),
                "Age": c.get("Age"),
                "BirthDate": to_iso(c.get("BirthDate"))
            }
            children_payload.append(child)
    data = {
        "TelegramUserId": telegram_user_id,
        "FileId": file_id,
        "ExtractedText": extracted_text,
        "RepresentativePhone": representative_phone,
        "Email": email,
        "City": city,
        "BirthDate": to_iso(birth_date),
        "CarBrand": car_brand,
        "CarNumber": car_number,
        "IsMarried": is_married,
        "SpouseFullName": spouse_full_name,
        "SpouseBirthDate": to_iso(spouse_birth_date),
        "HasChildren": has_children,
        "ChildrenCount": children_count,
        "Children": children_payload
    }
    if image_base64 is not None:
        data["ImageBase64"] = image_base64
    print("–í—ã–∑–≤–∞–Ω–∞ send_to_api")
    print("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", data)
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, json=data) as response:
                print("API status:", response.status)
                response_text = await response.text()
                print("API response:", response_text)
                response.raise_for_status()
                return await response.json()
        except aiohttp.ClientResponseError as e:
            print(f"API error: {e.status} - {e.message}")
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
            # await message.reply(f"–û—à–∏–±–∫–∞ API: {e.status} - {e.message}")
            raise

async def patch_to_api(photo_id, patch_data):
    # –¥–ª—è –¥–æ–∫–µ—Ä–∞ 8080, –ª–æ–∫–∞–ª—å–Ω—ã–π 5158.
    url = f"http://localhost:8080/api/ocrphoto/{photo_id}"
    async with aiohttp.ClientSession() as session:
        async with session.patch(url, json=patch_data) as response:
            print("API status:", response.status)
            response_text = await response.text()
            print("API response:", response_text)
            response.raise_for_status()
            return await response.json()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
async def queue_processor():
    while True:
        try:
            message, photo, temp_file = await processing_queue.get()
            await process_photo_async(message, photo, temp_file)
            processing_queue.task_done()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")

dp.include_router(router)

async def main():
    asyncio.create_task(queue_processor())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
