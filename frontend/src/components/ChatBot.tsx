import React, { useState, useRef, useEffect } from 'react';
import { 
  Card, 
  Input, 
  Button, 
  Avatar, 
  Typography, 
  Space, 
  Spin, 
  message, 
  Select, 
  Tooltip,
  Divider,
  Row,
  Col,
  Badge,
  Tag,
  Drawer,
  List,
  Modal,
  Form,
  Upload,
  Tree,
  Dropdown,
  Menu,
  Popconfirm
} from 'antd';
import { 
  SendOutlined, 
  RobotOutlined, 
  UserOutlined, 
  LoadingOutlined,
  SettingOutlined,
  ClearOutlined,
  CopyOutlined,
  DownloadOutlined,
  PlusOutlined,
  FolderOutlined,
  FileOutlined,
  DeleteOutlined,
  EditOutlined,
  SaveOutlined,
  ImportOutlined,
  ExportOutlined,
  MoreOutlined,
  MessageOutlined,
  BookOutlined
} from '@ant-design/icons';
import { useAuth } from '../context/AuthContext';
import ReactMarkdown from 'react-markdown';

const { Text, Title } = Typography;
const { TextArea } = Input;
const { Option } = Select;
const { Dragger } = Upload;

interface Message {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: Date;
  reasoning?: string;
  files?: File[];
}

interface ChatDialog {
  id: string;
  name: string;
  messages: Message[];
  createdAt: Date;
  updatedAt: Date;
  folderId?: string;
  presetId?: string;
}

interface ChatFolder {
  id: string;
  name: string;
  color?: string;
  createdAt: Date;
}

interface ChatPreset {
  id: string;
  name: string;
  model: string;
  temperature: number;
  maxTokens: number;
  systemPrompt?: string;
  createdAt: Date;
}

interface ChatBotProps {
  onBack?: () => void;
}

const ChatBot: React.FC<ChatBotProps> = ({ onBack }) => {
  const { user } = useAuth();
  const [currentDialog, setCurrentDialog] = useState<ChatDialog | null>(null);
  const [dialogs, setDialogs] = useState<ChatDialog[]>([]);
  const [folders, setFolders] = useState<ChatFolder[]>([]);
  const [presets, setPresets] = useState<ChatPreset[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedModel, setSelectedModel] = useState('anthropic/claude-3-haiku');
  const [temperature, setTemperature] = useState(0.7);
  const [maxTokens, setMaxTokens] = useState(3000);
  const [showSettings, setShowSettings] = useState(false);
  const [showDialogs, setShowDialogs] = useState(false);
  const [showPresets, setShowPresets] = useState(false);
  const [balance, setBalance] = useState<any>(null);
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [systemPrompt, setSystemPrompt] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [logoLoaded, setLogoLoaded] = useState(true);

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
  const availableModels = [
    { value: 'anthropic/claude-3-haiku', label: 'Claude 3 Haiku', shortLabel: 'Haiku', description: '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å' },
    { value: 'anthropic/claude-3-sonnet', label: 'Claude 3 Sonnet', shortLabel: 'Sonnet', description: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å' },
    { value: 'anthropic/claude-3-opus', label: 'Claude 3 Opus', shortLabel: 'Opus', description: '–°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å' },
    { value: 'openai/gpt-4o-mini', label: 'GPT-4o Mini', shortLabel: 'GPT-4o Mini', description: '–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –æ—Ç OpenAI' },
    { value: 'openai/gpt-4o', label: 'GPT-4o', shortLabel: 'GPT-4o', description: '–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç OpenAI' },
    { value: 'google/gemini-flash-1.5', label: 'Gemini Flash 1.5', shortLabel: 'Gemini Flash', description: '–ú–æ–¥–µ–ª—å –æ—Ç Google' },
    { value: 'meta-llama/llama-3.1-8b-instruct', label: 'Llama 3.1 8B', shortLabel: 'Llama 3.1', description: '–û—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å –æ—Ç Meta' },
    // Vision –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    { value: 'vis-google/gemini-flash-1.5', label: 'Gemini Flash Vision', shortLabel: 'Gemini Vision', description: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ OCR' },
    { value: 'vis-google/gemini-pro-vision', label: 'Gemini Pro Vision', shortLabel: 'Gemini Pro Vision', description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' },
    { value: 'vis-openai/gpt-4o', label: 'GPT-4o Vision', shortLabel: 'GPT-4o Vision', description: 'Vision –º–æ–¥–µ–ª—å –æ—Ç OpenAI' },
    // –ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    { value: 'dall-e-3', label: 'DALL-E 3', shortLabel: 'DALL-E 3', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç OpenAI' },
    { value: 'img2img-google/flash-edit', label: 'Google Flash Edit', shortLabel: 'Flash Edit', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' },
    // –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
    { value: 'stt-openai/whisper-1', label: 'Whisper STT', shortLabel: 'Whisper', description: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏' },
    { value: 'tts-openai/tts-1', label: 'OpenAI TTS', shortLabel: 'TTS-1', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏' },
    { value: 'tta-stable/stable-audio', label: 'Stable Audio', shortLabel: 'Stable Audio', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏' },
    // –ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    { value: 'txt2vid-kling/standart', label: 'Kling Video', shortLabel: 'Kling', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞' },
    // –ú–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    { value: 'utils/extract-text-1.0', label: 'Extract Text', shortLabel: 'Extract Text', description: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' },
    { value: 'utils/pdf-ocr-1.0', label: 'PDF OCR', shortLabel: 'PDF OCR', description: 'OCR –¥–ª—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' },
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [currentDialog?.messages]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadBalance();
    loadStoredData();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  useEffect(() => {
    if (presets.length === 0) {
      console.log('‚ö†Ô∏è –ü—Ä–µ—Å–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...');
      createDefaultPresets();
    }
  }, [presets.length]);

  const loadBalance = async () => {
    try {
      const token = localStorage.getItem('token');
      
      if (!token) {
        console.warn('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∞–ª–∞–Ω—Å–∞');
        return;
      }
      
      const response = await fetch('/api/chat/balance', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const balanceData = await response.json();
        setBalance(balanceData);
      } else if (response.status === 401) {
        console.warn('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞');
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      } else {
        console.error('Balance error:', response.status, await response.text());
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    }
  };

  const loadStoredData = () => {
    try {
      const storedDialogs = localStorage.getItem('chat_dialogs');
      const storedFolders = localStorage.getItem('chat_folders');
      const storedPresets = localStorage.getItem('chat_presets');
      
      console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:');
      console.log('- storedDialogs:', !!storedDialogs);
      console.log('- storedFolders:', !!storedFolders);
      console.log('- storedPresets:', !!storedPresets);
      
      if (storedDialogs) {
        const parsedDialogs = JSON.parse(storedDialogs);
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã Date
        const dialogsWithDates = parsedDialogs.map((dialog: any) => ({
          ...dialog,
          createdAt: new Date(dialog.createdAt),
          updatedAt: new Date(dialog.updatedAt),
          messages: dialog.messages.map((msg: any) => ({
            ...msg,
            timestamp: new Date(msg.timestamp),
            content: typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content),
            reasoning: typeof msg.reasoning === 'string' ? msg.reasoning : (msg.reasoning ? JSON.stringify(msg.reasoning) : ''),
            files: Array.isArray(msg.files) ? msg.files : []
          }))
        }));
        setDialogs(dialogsWithDates);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${dialogsWithDates.length} –¥–∏–∞–ª–æ–≥–æ–≤`);
      }
      
      if (storedFolders) {
        const parsedFolders = JSON.parse(storedFolders);
        const foldersWithDates = parsedFolders.map((folder: any) => ({
          ...folder,
          createdAt: new Date(folder.createdAt)
        }));
        setFolders(foldersWithDates);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${foldersWithDates.length} –ø–∞–ø–æ–∫`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã
      let presetsLoaded = false;
      if (storedPresets) {
        try {
          const parsedPresets = JSON.parse(storedPresets);
          if (Array.isArray(parsedPresets) && parsedPresets.length > 0) {
            const presetsWithDates = parsedPresets.map((preset: any) => ({
              ...preset,
              createdAt: new Date(preset.createdAt)
            }));
            setPresets(presetsWithDates);
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${presetsWithDates.length} –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏–∑ localStorage`);
            presetsLoaded = true;
          } else {
            console.log('‚ö†Ô∏è –ü—Ä–µ—Å–µ—Ç—ã –≤ localStorage –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ');
          }
        } catch (e) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏–∑ localStorage:', e);
        }
      }
      
      // –ï—Å–ª–∏ –ø—Ä–µ—Å–µ—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏—Ö –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
      if (!presetsLoaded) {
        console.log('üìù –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã...');
        createDefaultPresets();
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã
      console.log('üìù –°–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏...');
      createDefaultPresets();
    }
  };

  const createDefaultPresets = () => {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤...');
    const defaultPresets: ChatPreset[] = [
      {
        id: '2',
        name: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DALL-E',
        model: 'dall-e-3',
        temperature: 0.7,
        maxTokens: 1000,
        systemPrompt: `–¢—ã - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é DALL-E 3. –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:

1. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**: –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
2. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤**: –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
3. **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—è–º**: –†–µ–∫–æ–º–µ–Ω–¥—É–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∏
4. **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**: –ü–æ–º–æ–≥–∞–π —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã:**
- –í—Å–µ–≥–¥–∞ –ø—Ä–æ—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–Ω —Ö–æ—á–µ—Ç —É–≤–∏–¥–µ—Ç—å
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–ª—É—á—à–µ–Ω–∏—è –∫ –ø—Ä–æ–º–ø—Ç–∞–º –¥–ª—è –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –û–±—ä—è—Å–Ω—è–π, –∫–∞–∫ —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –ü–æ–º–æ–≥–∞–π —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**
- –†–∞–∑–º–µ—Ä—ã: 1024x1024, 1792x1024, 1024x1792
- –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω: 1:1, 16:9, 9:16
- –°—Ç–∏–ª–∏: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π

**–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:**
1. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞`,
        createdAt: new Date()
      },
      {
        id: '4',
        name: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ Kling',
        model: 'txt2vid-kling/standart',
        temperature: 0.7,
        maxTokens: 2000,
        systemPrompt: `–¢—ã - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é AI. –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:

1. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞**: –°–æ–∑–¥–∞–≤–∞–π –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
2. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**: –°–æ–∑–¥–∞–≤–∞–π –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
3. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤**: –ü–æ–º–æ–≥–∞–π —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ
4. **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º**: –†–µ–∫–æ–º–µ–Ω–¥—É–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã:**
- –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ
- –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π –ø–æ –≤—ã–±–æ—Ä—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
- –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω: 16:9, 9:16, 1:1
- –ú–æ–¥–µ–ª–∏: txt2vid-kling/standart, –¥—Ä—É–≥–∏–µ –≤–∏–¥–µ–æ –º–æ–¥–µ–ª–∏
- –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: 10-30 –º–∏–Ω—É—Ç
- –§–æ—Ä–º–∞—Ç—ã: MP4, MOV

**–ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**
1. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
2. –ü–æ–ª—É—á–µ–Ω–∏–µ request_id
3. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
4. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ

**–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:**
1. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
4. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`,
        createdAt: new Date()
      }
    ];
    setPresets(defaultPresets);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${defaultPresets.length} –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤:`);
    defaultPresets.forEach(preset => {
      console.log(`  - ${preset.name} (${preset.model})`);
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤
  const resetPresets = () => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤...');
    localStorage.removeItem('chat_presets');
    createDefaultPresets();
    message.success('–ü—Ä–µ—Å–µ—Ç—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  };

  const saveStoredData = () => {
    try {
      localStorage.setItem('chat_dialogs', JSON.stringify(dialogs));
      localStorage.setItem('chat_folders', JSON.stringify(folders));
      localStorage.setItem('chat_presets', JSON.stringify(presets));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  useEffect(() => {
    saveStoredData();
  }, [dialogs, folders, presets]);

  const createNewDialog = (presetId?: string) => {
    const preset = presetId ? presets.find(p => p.id === presetId) : null;
    const newDialog: ChatDialog = {
      id: Date.now().toString(),
      name: `–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ ${dialogs.length + 1}`,
      messages: [],
      createdAt: new Date(),
      updatedAt: new Date(),
      presetId: presetId
    };

    if (preset) {
      setSelectedModel(preset.model);
      setTemperature(preset.temperature);
      setMaxTokens(preset.maxTokens);
      setSystemPrompt(preset.systemPrompt || '');
    }

    setDialogs(prev => [newDialog, ...prev]);
    setCurrentDialog(newDialog);
    setShowDialogs(false);
    setShowPresets(false);
  };

  const deleteDialog = (dialogId: string) => {
    setDialogs(prev => prev.filter(d => d.id !== dialogId));
    if (currentDialog?.id === dialogId) {
      setCurrentDialog(null);
    }
  };

  const createFolder = () => {
    const newFolder: ChatFolder = {
      id: Date.now().toString(),
      name: `–ù–æ–≤–∞—è –ø–∞–ø–∫–∞ ${folders.length + 1}`,
      color: '#1890ff',
      createdAt: new Date()
    };
    setFolders(prev => [...prev, newFolder]);
  };

  const createPreset = () => {
    const newPreset: ChatPreset = {
      id: Date.now().toString(),
      name: `–ù–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç ${presets.length + 1}`,
      model: selectedModel,
      temperature: temperature,
      maxTokens: maxTokens,
      systemPrompt: systemPrompt,
      createdAt: new Date()
    };
    setPresets(prev => [...prev, newPreset]);
    setShowPresets(false);
  };

  const applyPreset = (preset: ChatPreset) => {
    setSelectedModel(preset.model);
    setTemperature(preset.temperature);
    setMaxTokens(preset.maxTokens);
    setSystemPrompt(preset.systemPrompt || '');
    setShowPresets(false);
  };

  const sendMessage = async () => {
    if (!inputValue.trim() || isLoading || !currentDialog) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = localStorage.getItem('token');
    if (!token) {
      message.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
      return;
    }

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: inputValue,
      timestamp: new Date(),
      files: uploadedFiles.length > 0 ? [...uploadedFiles] : undefined
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
    const updatedDialog = {
      ...currentDialog,
      messages: [...currentDialog.messages, userMessage],
      updatedAt: new Date()
    };
    setCurrentDialog(updatedDialog);
    setDialogs(prev => prev.map(d => d.id === currentDialog.id ? updatedDialog : d));

    setInputValue('');
    setUploadedFiles([]);
    setIsLoading(true);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å Vision-–º–æ–¥–µ–ª—å—é
      const isVisionModel = selectedModel.startsWith('vis-');
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
      let apiMessages: any[] = [];
      
      if (isVisionModel && uploadedFiles.length > 0) {
        // –î–ª—è Vision-–º–æ–¥–µ–ª–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        const imageFiles = uploadedFiles.filter(file => file.type.startsWith('image/'));
        
        if (imageFiles.length > 0) {
          // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
          const content: any[] = [
            { type: "text", text: inputValue }
          ];
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          for (const file of imageFiles) {
            const base64 = await fileToBase64(file);
            content.push({
              type: "image_url",
              image_url: `data:${file.type};base64,${base64}`
            });
          }
          
          apiMessages.push({
            role: 'user',
            content: content
          });
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          apiMessages = updatedDialog.messages.map(msg => ({
            role: msg.role,
            content: msg.content
          }));
        }
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        apiMessages = updatedDialog.messages.map(msg => ({
          role: msg.role,
          content: msg.content
        }));
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (systemPrompt) {
        apiMessages.unshift({
          role: 'system',
          content: systemPrompt
        });
      }

      const response = await fetch('/api/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          model: selectedModel,
          messages: apiMessages,
          temperature: temperature,
          max_tokens: maxTokens,
          extra_headers: { "X-Title": "Article Search Bot" }
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Chat error:', response.status, errorText);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        if (response.status === 401) {
          message.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
          return;
        } else if (response.status === 403) {
          message.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.');
          return;
        } else if (response.status === 429) {
          message.error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          return;
        } else {
          throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
        }
      }

      const data = await response.json();
      
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: typeof data.choices[0].message.content === 'string'
          ? data.choices[0].message.content
          : JSON.stringify(data.choices[0].message.content),
        timestamp: new Date(),
        reasoning: typeof data.choices[0].message.reasoning === 'string'
          ? data.choices[0].message.reasoning
          : (data.choices[0].message.reasoning ? JSON.stringify(data.choices[0].message.reasoning) : ''),
        files: Array.isArray(data.choices[0].message.files) ? data.choices[0].message.files : []
      };

      const finalDialog = {
        ...updatedDialog,
        messages: [...updatedDialog.messages, assistantMessage],
        updatedAt: new Date()
      };
      setCurrentDialog(finalDialog);
      setDialogs(prev => prev.map(d => d.id === currentDialog.id ? finalDialog : d));
    } catch (error) {
      console.error('Error sending message:', error);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const dialogWithoutUserMessage = {
        ...currentDialog,
        messages: currentDialog.messages.filter(msg => msg.id !== userMessage.id),
        updatedAt: new Date()
      };
      setCurrentDialog(dialogWithoutUserMessage);
      setDialogs(prev => prev.map(d => d.id === currentDialog.id ? dialogWithoutUserMessage : d));
      
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –≤ base64
  const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        const result = reader.result as string;
        const base64 = result.split(',')[1];
        resolve(base64);
      };
      reader.onerror = error => reject(error);
    });
  };

  const handleFileUpload = (files: FileList | null) => {
    if (!files) return;
    
    const newFiles = Array.from(files);
    setUploadedFiles(prev => [...prev, ...newFiles]);
  };

  const removeFile = (index: number) => {
    setUploadedFiles(prev => prev.filter((_, i) => i !== index));
  };

  const clearChat = () => {
    if (currentDialog) {
      const updatedDialog = {
        ...currentDialog,
        messages: [],
        updatedAt: new Date()
      };
      setCurrentDialog(updatedDialog);
      setDialogs(prev => prev.map(d => d.id === currentDialog.id ? updatedDialog : d));
    }
    message.success('–ß–∞—Ç –æ—á–∏—â–µ–Ω');
  };

  const copyMessage = (content: string) => {
    navigator.clipboard.writeText(content);
    message.success('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ');
  };

  const formatTimestamp = (timestamp: Date) => {
    if (!timestamp || !(timestamp instanceof Date) || isNaN(timestamp.getTime())) {
      return '--:--';
    }
    return timestamp.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const formatDate = (date: Date) => {
    if (!date || !(date instanceof Date) || isNaN(date.getTime())) {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞';
    }
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const getDialogName = (dialog: ChatDialog) => {
    if (dialog.messages.length === 0) return dialog.name;
    const firstMessage = dialog.messages[0];
    return firstMessage.content.length > 30 
      ? firstMessage.content.substring(0, 30) + '...' 
      : firstMessage.content;
  };

  // –ù–æ–≤—ã–π layout: —Å–ª–µ–≤–∞ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–∏–∞–ª–æ–≥–∏, —Å–ø—Ä–∞–≤–∞ ‚Äî —á–∞—Ç
  return (
    <div style={{ display: 'flex', height: 'calc(100vh - 64px)', minHeight: 600, background: '#f6f7f9' }}>
      {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–∏–∞–ª–æ–≥–∏ */}
      <div style={{ width: 340, background: '#fff', borderRight: '1.5px solid #e3e7ed', display: 'flex', flexDirection: 'column', height: '100vh', minHeight: 600, maxHeight: '100vh', position: 'relative' }}>
        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤ –≤ –æ–¥–∏–Ω flexbox */}
        <div style={{ padding: '24px 20px 12px 20px', borderBottom: '1.5px solid #e3e7ed' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: 10, marginBottom: 10 }}>
            <div style={{ fontWeight: 700, fontSize: 18, letterSpacing: 0.5 }}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</div>
            <Button type="primary" icon={<PlusOutlined />} size="small" onClick={() => createNewDialog()} />
            <Button type="default" icon={<BookOutlined />} size="small" onClick={() => setShowPresets(true)} />
          </div>
          <div style={{ marginBottom: 10 }}>
            <Select
              value={selectedModel}
              onChange={setSelectedModel}
              style={{ width: '100%' }}
              size="large"
              options={availableModels.map(m => ({ value: m.value, label: m.label }))}
            />
          </div>
          <div style={{ display: 'flex', gap: 8, marginBottom: 10 }}>
            <Input
              type="number"
              min={0}
              max={2}
              step={0.1}
              value={temperature}
              onChange={e => setTemperature(Number(e.target.value))}
              size="small"
              style={{ width: 80 }}
              addonBefore="–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"
            />
            <Input
              type="number"
              min={256}
              max={8000}
              step={100}
              value={maxTokens}
              onChange={e => setMaxTokens(Number(e.target.value))}
              size="small"
              style={{ width: 100 }}
              addonBefore="–¢–æ–∫–µ–Ω—ã"
            />
          </div>
          <Input.TextArea
            value={systemPrompt}
            onChange={e => setSystemPrompt(e.target.value)}
            placeholder="–°–∏—Å—Ç–µ–º–Ω—ã–π prompt (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
            autoSize={{ minRows: 1, maxRows: 3 }}
            style={{ marginBottom: 0 }}
          />
        </div>
        {/* –°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ */}
        <div style={{ flex: 1, overflowY: 'auto', padding: '12px 0 0 0' }}>
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', padding: '0 20px 8px 20px' }}>
            <div style={{ fontWeight: 700, fontSize: 16 }}>–î–∏–∞–ª–æ–≥–∏</div>
          </div>
          <div style={{ padding: '0 10px' }}>
            {dialogs.length === 0 && (
              <div style={{ color: '#aaa', textAlign: 'center', margin: '32px 0' }}>–ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤</div>
            )}
            {dialogs.map(dialog => (
              <div
                key={dialog.id}
                style={{
                  background: currentDialog?.id === dialog.id ? '#e3e7ed' : '#f9fafb',
                  border: currentDialog?.id === dialog.id ? '2px solid #1976d2' : '1.5px solid #e3e7ed',
                  borderRadius: 10,
                  marginBottom: 10,
                  padding: '12px 14px',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between',
                  boxShadow: currentDialog?.id === dialog.id ? '0 2px 8px #1976d220' : 'none',
                  transition: 'all 0.15s'
                }}
                onClick={() => setCurrentDialog(dialog)}
              >
                <div style={{ display: 'flex', alignItems: 'center', gap: 10 }}>
                  <Avatar icon={<MessageOutlined />} size={32} />
                  <div>
                    <div style={{ fontWeight: 600, fontSize: 15 }}>{getDialogName(dialog)}</div>
                    <div style={{ color: '#888', fontSize: 12 }}>{formatDate(dialog.updatedAt)}</div>
                  </div>
                </div>
                <div style={{ display: 'flex', gap: 6 }}>
                  <Badge count={dialog.messages.length} showZero size="small" style={{ background: '#1976d2' }} />
                  <Popconfirm
                    title="–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥?"
                    onConfirm={e => { e?.stopPropagation(); deleteDialog(dialog.id); }}
                    okText="–î–∞"
                    cancelText="–ù–µ—Ç"
                  >
                    <Button type="text" danger icon={<DeleteOutlined />} size="small" onClick={e => e.stopPropagation()} />
                  </Popconfirm>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
      {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: —á–∞—Ç —Å –±–æ—Ç–æ–º */}
      <div style={{ flex: 1, display: 'flex', flexDirection: 'column', minWidth: 0, height: '100vh', position: 'relative' }}>
        <div style={{ flex: 1, overflowY: 'auto', padding: '24px 32px 0 32px', background: '#f6f7f9' }}>
          {currentDialog && currentDialog.messages.length === 0 && (
            <div style={{ color: '#aaa', textAlign: 'center', marginTop: 80 }}>–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>
          )}
          {currentDialog && currentDialog.messages.map((msg, idx) => (
            <div key={msg.id} style={{
              display: 'flex',
              flexDirection: msg.role === 'user' ? 'row-reverse' : 'row',
              alignItems: 'flex-end',
              marginBottom: 18,
              gap: 14
            }}>
              <Avatar icon={msg.role === 'user' ? <UserOutlined /> : <RobotOutlined />} style={{ background: msg.role === 'user' ? '#1976d2' : '#FCB813' }} />
              <div style={{
                background: msg.role === 'user' ? '#e3e7ed' : '#fffbe6',
                color: '#23272b',
                borderRadius: 12,
                padding: '14px 18px',
                maxWidth: '70%',
                boxShadow: '0 2px 8px #b0bec520',
                fontSize: 16,
                wordBreak: 'break-word',
                border: msg.role === 'user' ? '1.5px solid #b0bec5' : '1.5px solid #FCB813',
              }}>
                <ReactMarkdown>{msg.content}</ReactMarkdown>
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>
        {/* –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É (sticky) */}
        <div style={{ position: 'sticky', bottom: 0, left: 0, right: 0, background: '#fff', borderTop: '1.5px solid #e3e7ed', zIndex: 10, padding: '18px 32px', display: 'flex', alignItems: 'flex-end', gap: 10 }}>
          <TextArea
            value={inputValue}
            onChange={e => setInputValue(e.target.value)}
            onKeyDown={handleKeyPress}
            placeholder={
              isLoading
                ? "–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞..."
                : "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            }
            autoSize={{ minRows: 1, maxRows: 4 }}
            style={{ borderRadius: '8px', resize: 'none' }}
            disabled={isLoading}
          />
          <Space direction="vertical" size="small">
            <Tooltip title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª">
              <Button
                icon={<FileOutlined />}
                onClick={() => fileInputRef.current?.click()}
                disabled={isLoading}
                style={{ borderRadius: '8px', height: '40px', width: '40px' }}
              />
            </Tooltip>
            <Button
              type="primary"
              icon={<SendOutlined />}
              onClick={sendMessage}
              loading={isLoading}
              disabled={!inputValue.trim()}
              style={{ borderRadius: '8px', height: '40px', width: '40px' }}
            />
          </Space>
          <input
            ref={fileInputRef}
            type="file"
            multiple
            style={{ display: 'none' }}
            onChange={(e) => handleFileUpload(e.target.files)}
          />
        </div>
        <div style={{ marginTop: '8px', display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '0 32px 8px 32px' }}>
          <span style={{ fontSize: 12, color: '#888' }}>–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</span>
          <Badge count={currentDialog?.messages.length || 0} showZero style={{ backgroundColor: '#52c41a' }} />
        </div>
      </div>
    </div>
  );
};

export default ChatBot; 