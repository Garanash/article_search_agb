import React, { useState, useRef, useEffect } from 'react';
import { 
  Card, 
  Input, 
  Button, 
  Avatar, 
  Typography, 
  Space, 
  Spin, 
  message, 
  Select, 
  Tooltip,
  Divider,
  Row,
  Col,
  Badge,
  Tag,
  Drawer,
  List,
  Modal,
  Form,
  Upload,
  Tree,
  Dropdown,
  Menu,
  Popconfirm
} from 'antd';
import { 
  SendOutlined, 
  RobotOutlined, 
  UserOutlined, 
  LoadingOutlined,
  SettingOutlined,
  ClearOutlined,
  CopyOutlined,
  DownloadOutlined,
  PlusOutlined,
  FolderOutlined,
  FileOutlined,
  DeleteOutlined,
  EditOutlined,
  SaveOutlined,
  ImportOutlined,
  ExportOutlined,
  MoreOutlined,
  MessageOutlined,
  BookOutlined
} from '@ant-design/icons';
import { useAuth } from '../context/AuthContext';
import ReactMarkdown from 'react-markdown';

const { Text, Title } = Typography;
const { TextArea } = Input;
const { Option } = Select;
const { Dragger } = Upload;

interface Message {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: Date;
  reasoning?: string;
  files?: File[];
}

interface ChatDialog {
  id: string;
  name: string;
  messages: Message[];
  createdAt: Date;
  updatedAt: Date;
  folderId?: string;
  presetId?: string;
}

interface ChatFolder {
  id: string;
  name: string;
  color?: string;
  createdAt: Date;
}

interface ChatPreset {
  id: string;
  name: string;
  model: string;
  temperature: number;
  maxTokens: number;
  systemPrompt?: string;
  createdAt: Date;
}

interface ChatBotProps {
  onBack?: () => void;
}

const ChatBot: React.FC<ChatBotProps> = ({ onBack }) => {
  const { user } = useAuth();
  const [currentDialog, setCurrentDialog] = useState<ChatDialog | null>(null);
  const [dialogs, setDialogs] = useState<ChatDialog[]>([]);
  const [folders, setFolders] = useState<ChatFolder[]>([]);
  const [presets, setPresets] = useState<ChatPreset[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedModel, setSelectedModel] = useState('anthropic/claude-3-haiku');
  const [temperature, setTemperature] = useState(0.7);
  const [maxTokens, setMaxTokens] = useState(3000);
  const [showSettings, setShowSettings] = useState(false);
  const [showDialogs, setShowDialogs] = useState(false);
  const [showPresets, setShowPresets] = useState(false);
  const [balance, setBalance] = useState<any>(null);
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [systemPrompt, setSystemPrompt] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [logoLoaded, setLogoLoaded] = useState(true);

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
  const availableModels = [
    { value: 'anthropic/claude-3-haiku', label: 'Claude 3 Haiku', shortLabel: 'Haiku', description: '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å' },
    { value: 'anthropic/claude-3-sonnet', label: 'Claude 3 Sonnet', shortLabel: 'Sonnet', description: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å' },
    { value: 'anthropic/claude-3-opus', label: 'Claude 3 Opus', shortLabel: 'Opus', description: '–°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å' },
    { value: 'openai/gpt-4o-mini', label: 'GPT-4o Mini', shortLabel: 'GPT-4o Mini', description: '–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –æ—Ç OpenAI' },
    { value: 'openai/gpt-4o', label: 'GPT-4o', shortLabel: 'GPT-4o', description: '–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç OpenAI' },
    { value: 'google/gemini-flash-1.5', label: 'Gemini Flash 1.5', shortLabel: 'Gemini Flash', description: '–ú–æ–¥–µ–ª—å –æ—Ç Google' },
    { value: 'meta-llama/llama-3.1-8b-instruct', label: 'Llama 3.1 8B', shortLabel: 'Llama 3.1', description: '–û—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å –æ—Ç Meta' },
    // Vision –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    { value: 'vis-google/gemini-flash-1.5', label: 'Gemini Flash Vision', shortLabel: 'Gemini Vision', description: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ OCR' },
    { value: 'vis-google/gemini-pro-vision', label: 'Gemini Pro Vision', shortLabel: 'Gemini Pro Vision', description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' },
    { value: 'vis-openai/gpt-4o', label: 'GPT-4o Vision', shortLabel: 'GPT-4o Vision', description: 'Vision –º–æ–¥–µ–ª—å –æ—Ç OpenAI' },
    // –ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    { value: 'dall-e-3', label: 'DALL-E 3', shortLabel: 'DALL-E 3', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç OpenAI' },
    { value: 'img2img-google/flash-edit', label: 'Google Flash Edit', shortLabel: 'Flash Edit', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' },
    // –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
    { value: 'stt-openai/whisper-1', label: 'Whisper STT', shortLabel: 'Whisper', description: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏' },
    { value: 'tts-openai/tts-1', label: 'OpenAI TTS', shortLabel: 'TTS-1', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏' },
    { value: 'tta-stable/stable-audio', label: 'Stable Audio', shortLabel: 'Stable Audio', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏' },
    // –ú–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    { value: 'txt2vid-kling/standart', label: 'Kling Video', shortLabel: 'Kling', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞' },
    // –ú–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    { value: 'utils/extract-text-1.0', label: 'Extract Text', shortLabel: 'Extract Text', description: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' },
    { value: 'utils/pdf-ocr-1.0', label: 'PDF OCR', shortLabel: 'PDF OCR', description: 'OCR –¥–ª—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' },
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [currentDialog?.messages]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadBalance();
    loadStoredData();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  useEffect(() => {
    if (presets.length === 0) {
      console.log('‚ö†Ô∏è –ü—Ä–µ—Å–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...');
      createDefaultPresets();
    }
  }, [presets.length]);

  const loadBalance = async () => {
    try {
      const token = localStorage.getItem('token');
      
      if (!token) {
        console.warn('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∞–ª–∞–Ω—Å–∞');
        return;
      }
      
      const response = await fetch('/api/chat/balance', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const balanceData = await response.json();
        setBalance(balanceData);
      } else if (response.status === 401) {
        console.warn('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞');
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      } else {
        console.error('Balance error:', response.status, await response.text());
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    }
  };

  const loadStoredData = () => {
    try {
      const storedDialogs = localStorage.getItem('chat_dialogs');
      const storedFolders = localStorage.getItem('chat_folders');
      const storedPresets = localStorage.getItem('chat_presets');
      
      console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:');
      console.log('- storedDialogs:', !!storedDialogs);
      console.log('- storedFolders:', !!storedFolders);
      console.log('- storedPresets:', !!storedPresets);
      
      if (storedDialogs) {
        const parsedDialogs = JSON.parse(storedDialogs);
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã Date
        const dialogsWithDates = parsedDialogs.map((dialog: any) => ({
          ...dialog,
          createdAt: new Date(dialog.createdAt),
          updatedAt: new Date(dialog.updatedAt),
          messages: dialog.messages.map((msg: any) => ({
            ...msg,
            timestamp: new Date(msg.timestamp),
            content: typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content),
            reasoning: typeof msg.reasoning === 'string' ? msg.reasoning : (msg.reasoning ? JSON.stringify(msg.reasoning) : ''),
            files: Array.isArray(msg.files) ? msg.files : []
          }))
        }));
        setDialogs(dialogsWithDates);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${dialogsWithDates.length} –¥–∏–∞–ª–æ–≥–æ–≤`);
      }
      
      if (storedFolders) {
        const parsedFolders = JSON.parse(storedFolders);
        const foldersWithDates = parsedFolders.map((folder: any) => ({
          ...folder,
          createdAt: new Date(folder.createdAt)
        }));
        setFolders(foldersWithDates);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${foldersWithDates.length} –ø–∞–ø–æ–∫`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã
      let presetsLoaded = false;
      if (storedPresets) {
        try {
          const parsedPresets = JSON.parse(storedPresets);
          if (Array.isArray(parsedPresets) && parsedPresets.length > 0) {
            const presetsWithDates = parsedPresets.map((preset: any) => ({
              ...preset,
              createdAt: new Date(preset.createdAt)
            }));
            setPresets(presetsWithDates);
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${presetsWithDates.length} –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏–∑ localStorage`);
            presetsLoaded = true;
          } else {
            console.log('‚ö†Ô∏è –ü—Ä–µ—Å–µ—Ç—ã –≤ localStorage –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ');
          }
        } catch (e) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏–∑ localStorage:', e);
        }
      }
      
      // –ï—Å–ª–∏ –ø—Ä–µ—Å–µ—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏—Ö –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
      if (!presetsLoaded) {
        console.log('üìù –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã...');
        createDefaultPresets();
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã
      console.log('üìù –°–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏...');
      createDefaultPresets();
    }
  };

  const createDefaultPresets = () => {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤...');
    const defaultPresets: ChatPreset[] = [
      {
        id: '2',
        name: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DALL-E',
        model: 'dall-e-3',
        temperature: 0.7,
        maxTokens: 1000,
        systemPrompt: `–¢—ã - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é DALL-E 3. –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:

1. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**: –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
2. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤**: –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
3. **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—è–º**: –†–µ–∫–æ–º–µ–Ω–¥—É–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∏
4. **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**: –ü–æ–º–æ–≥–∞–π —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã:**
- –í—Å–µ–≥–¥–∞ –ø—Ä–æ—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–Ω —Ö–æ—á–µ—Ç —É–≤–∏–¥–µ—Ç—å
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–ª—É—á—à–µ–Ω–∏—è –∫ –ø—Ä–æ–º–ø—Ç–∞–º –¥–ª—è –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –û–±—ä—è—Å–Ω—è–π, –∫–∞–∫ —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –ü–æ–º–æ–≥–∞–π —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**
- –†–∞–∑–º–µ—Ä—ã: 1024x1024, 1792x1024, 1024x1792
- –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω: 1:1, 16:9, 9:16
- –°—Ç–∏–ª–∏: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π

**–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:**
1. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞`,
        createdAt: new Date()
      },
      {
        id: '4',
        name: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ Kling',
        model: 'txt2vid-kling/standart',
        temperature: 0.7,
        maxTokens: 2000,
        systemPrompt: `–¢—ã - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é AI. –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:

1. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞**: –°–æ–∑–¥–∞–≤–∞–π –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
2. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**: –°–æ–∑–¥–∞–≤–∞–π –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
3. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤**: –ü–æ–º–æ–≥–∞–π —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ
4. **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º**: –†–µ–∫–æ–º–µ–Ω–¥—É–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã:**
- –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ
- –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π –ø–æ –≤—ã–±–æ—Ä—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
- –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω: 16:9, 9:16, 1:1
- –ú–æ–¥–µ–ª–∏: txt2vid-kling/standart, –¥—Ä—É–≥–∏–µ –≤–∏–¥–µ–æ –º–æ–¥–µ–ª–∏
- –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: 10-30 –º–∏–Ω—É—Ç
- –§–æ—Ä–º–∞—Ç—ã: MP4, MOV

**–ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**
1. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
2. –ü–æ–ª—É—á–µ–Ω–∏–µ request_id
3. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
4. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ

**–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:**
1. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
4. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`,
        createdAt: new Date()
      }
    ];
    setPresets(defaultPresets);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${defaultPresets.length} –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤:`);
    defaultPresets.forEach(preset => {
      console.log(`  - ${preset.name} (${preset.model})`);
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤
  const resetPresets = () => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤...');
    localStorage.removeItem('chat_presets');
    createDefaultPresets();
    message.success('–ü—Ä–µ—Å–µ—Ç—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  };

  const saveStoredData = () => {
    try {
      localStorage.setItem('chat_dialogs', JSON.stringify(dialogs));
      localStorage.setItem('chat_folders', JSON.stringify(folders));
      localStorage.setItem('chat_presets', JSON.stringify(presets));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  useEffect(() => {
    saveStoredData();
  }, [dialogs, folders, presets]);

  const createNewDialog = (presetId?: string) => {
    const preset = presetId ? presets.find(p => p.id === presetId) : null;
    const newDialog: ChatDialog = {
      id: Date.now().toString(),
      name: `–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ ${dialogs.length + 1}`,
      messages: [],
      createdAt: new Date(),
      updatedAt: new Date(),
      presetId: presetId
    };

    if (preset) {
      setSelectedModel(preset.model);
      setTemperature(preset.temperature);
      setMaxTokens(preset.maxTokens);
      setSystemPrompt(preset.systemPrompt || '');
    }

    setDialogs(prev => [newDialog, ...prev]);
    setCurrentDialog(newDialog);
    setShowDialogs(false);
    setShowPresets(false);
  };

  const deleteDialog = (dialogId: string) => {
    setDialogs(prev => prev.filter(d => d.id !== dialogId));
    if (currentDialog?.id === dialogId) {
      setCurrentDialog(null);
    }
  };

  const createFolder = () => {
    const newFolder: ChatFolder = {
      id: Date.now().toString(),
      name: `–ù–æ–≤–∞—è –ø–∞–ø–∫–∞ ${folders.length + 1}`,
      color: '#1890ff',
      createdAt: new Date()
    };
    setFolders(prev => [...prev, newFolder]);
  };

  const createPreset = () => {
    const newPreset: ChatPreset = {
      id: Date.now().toString(),
      name: `–ù–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç ${presets.length + 1}`,
      model: selectedModel,
      temperature: temperature,
      maxTokens: maxTokens,
      systemPrompt: systemPrompt,
      createdAt: new Date()
    };
    setPresets(prev => [...prev, newPreset]);
    setShowPresets(false);
  };

  const applyPreset = (preset: ChatPreset) => {
    setSelectedModel(preset.model);
    setTemperature(preset.temperature);
    setMaxTokens(preset.maxTokens);
    setSystemPrompt(preset.systemPrompt || '');
    setShowPresets(false);
  };

  const sendMessage = async () => {
    if (!inputValue.trim() || isLoading || !currentDialog) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = localStorage.getItem('token');
    if (!token) {
      message.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
      return;
    }

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: inputValue,
      timestamp: new Date(),
      files: uploadedFiles.length > 0 ? [...uploadedFiles] : undefined
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
    const updatedDialog = {
      ...currentDialog,
      messages: [...currentDialog.messages, userMessage],
      updatedAt: new Date()
    };
    setCurrentDialog(updatedDialog);
    setDialogs(prev => prev.map(d => d.id === currentDialog.id ? updatedDialog : d));

    setInputValue('');
    setUploadedFiles([]);
    setIsLoading(true);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å Vision-–º–æ–¥–µ–ª—å—é
      const isVisionModel = selectedModel.startsWith('vis-');
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
      let apiMessages: any[] = [];
      
      if (isVisionModel && uploadedFiles.length > 0) {
        // –î–ª—è Vision-–º–æ–¥–µ–ª–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        const imageFiles = uploadedFiles.filter(file => file.type.startsWith('image/'));
        
        if (imageFiles.length > 0) {
          // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
          const content: any[] = [
            { type: "text", text: inputValue }
          ];
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          for (const file of imageFiles) {
            const base64 = await fileToBase64(file);
            content.push({
              type: "image_url",
              image_url: `data:${file.type};base64,${base64}`
            });
          }
          
          apiMessages.push({
            role: 'user',
            content: content
          });
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          apiMessages = updatedDialog.messages.map(msg => ({
            role: msg.role,
            content: msg.content
          }));
        }
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        apiMessages = updatedDialog.messages.map(msg => ({
          role: msg.role,
          content: msg.content
        }));
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (systemPrompt) {
        apiMessages.unshift({
          role: 'system',
          content: systemPrompt
        });
      }

      const response = await fetch('/api/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          model: selectedModel,
          messages: apiMessages,
          temperature: temperature,
          max_tokens: maxTokens,
          extra_headers: { "X-Title": "Article Search Bot" }
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Chat error:', response.status, errorText);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        if (response.status === 401) {
          message.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
          return;
        } else if (response.status === 403) {
          message.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.');
          return;
        } else if (response.status === 429) {
          message.error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          return;
        } else {
          throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
        }
      }

      const data = await response.json();
      
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: typeof data.choices[0].message.content === 'string'
          ? data.choices[0].message.content
          : JSON.stringify(data.choices[0].message.content),
        timestamp: new Date(),
        reasoning: typeof data.choices[0].message.reasoning === 'string'
          ? data.choices[0].message.reasoning
          : (data.choices[0].message.reasoning ? JSON.stringify(data.choices[0].message.reasoning) : ''),
        files: Array.isArray(data.choices[0].message.files) ? data.choices[0].message.files : []
      };

      const finalDialog = {
        ...updatedDialog,
        messages: [...updatedDialog.messages, assistantMessage],
        updatedAt: new Date()
      };
      setCurrentDialog(finalDialog);
      setDialogs(prev => prev.map(d => d.id === currentDialog.id ? finalDialog : d));
    } catch (error) {
      console.error('Error sending message:', error);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const dialogWithoutUserMessage = {
        ...currentDialog,
        messages: currentDialog.messages.filter(msg => msg.id !== userMessage.id),
        updatedAt: new Date()
      };
      setCurrentDialog(dialogWithoutUserMessage);
      setDialogs(prev => prev.map(d => d.id === currentDialog.id ? dialogWithoutUserMessage : d));
      
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –≤ base64
  const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        const result = reader.result as string;
        const base64 = result.split(',')[1];
        resolve(base64);
      };
      reader.onerror = error => reject(error);
    });
  };

  const handleFileUpload = (files: FileList | null) => {
    if (!files) return;
    
    const newFiles = Array.from(files);
    setUploadedFiles(prev => [...prev, ...newFiles]);
  };

  const removeFile = (index: number) => {
    setUploadedFiles(prev => prev.filter((_, i) => i !== index));
  };

  const clearChat = () => {
    if (currentDialog) {
      const updatedDialog = {
        ...currentDialog,
        messages: [],
        updatedAt: new Date()
      };
      setCurrentDialog(updatedDialog);
      setDialogs(prev => prev.map(d => d.id === currentDialog.id ? updatedDialog : d));
    }
    message.success('–ß–∞—Ç –æ—á–∏—â–µ–Ω');
  };

  const copyMessage = (content: string) => {
    navigator.clipboard.writeText(content);
    message.success('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ');
  };

  const formatTimestamp = (timestamp: Date) => {
    if (!timestamp || !(timestamp instanceof Date) || isNaN(timestamp.getTime())) {
      return '--:--';
    }
    return timestamp.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const formatDate = (date: Date) => {
    if (!date || !(date instanceof Date) || isNaN(date.getTime())) {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞';
    }
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const getDialogName = (dialog: ChatDialog) => {
    if (dialog.messages.length === 0) return dialog.name;
    const firstMessage = dialog.messages[0];
    return firstMessage.content.length > 30 
      ? firstMessage.content.substring(0, 30) + '...' 
      : firstMessage.content;
  };

  return (
    <div style={{ 
      maxWidth: '1400px', 
      margin: '0 auto', 
      padding: '24px',
      minHeight: '120vh',
      display: 'flex',
      flexDirection: 'column'
    }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card 
        style={{ 
          marginBottom: '16px',
          borderRadius: '12px',
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
        }}
      >
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
            <Avatar 
              size={48} 
              icon={<RobotOutlined />} 
              style={{ backgroundColor: '#1890ff' }}
            />
            <div>
              <Title level={4} style={{ margin: 0, display: 'flex', alignItems: 'center', gap: 12, background: 'transparent' }}>
                IRON FELIX AI
              </Title>
              <Text type="secondary">–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã</Text>
              {balance && balance.data && (
                <div style={{ marginTop: '4px' }}>
                  <Tag color={balance.data.user_status === 0 ? 'green' : balance.data.user_status === 1 ? '#FCB813' : 'red'}>
                    –ë–∞–ª–∞–Ω—Å: {parseFloat(balance.data.credits).toFixed(2)} –∫—Ä–µ–¥–∏—Ç–æ–≤
                  </Tag>
                  {balance.data.user_status !== 0 && (
                    <Text type="secondary" style={{ fontSize: '11px', marginLeft: '8px' }}>
                      {balance.data.user_status_text}
                    </Text>
                  )}
                </div>
              )}
            </div>
          </div>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
            <Space>
              <Button 
                icon={<PlusOutlined />} 
                onClick={() => createNewDialog()}
                type="primary"
              >
                –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
              </Button>
              <Button 
                icon={<MessageOutlined />} 
                onClick={() => setShowDialogs(true)}
              >
                –î–∏–∞–ª–æ–≥–∏
              </Button>
              <Button 
                icon={<BookOutlined />} 
                onClick={() => setShowPresets(true)}
              >
                –ü—Ä–µ—Å–µ—Ç—ã {presets.length > 0 && `(${presets.length})`}
              </Button>
              <Tooltip title="–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ—Å–µ—Ç—ã">
                <Button 
                  icon={<ClearOutlined />} 
                  onClick={resetPresets}
                  size="small"
                  type="text"
                />
              </Tooltip>
              <Tooltip title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏">
                <Button 
                  icon={<SettingOutlined />} 
                  onClick={() => setShowSettings(!showSettings)}
                  type={showSettings ? 'primary' : 'default'}
                />
              </Tooltip>
              {currentDialog && (
                <Tooltip title="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç">
                  <Button 
                    icon={<ClearOutlined />} 
                    onClick={clearChat}
                    danger
                  />
                </Tooltip>
              )}
            </Space>
          </div>
        </div>
      </Card>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      {showSettings && (
        <Card 
          style={{ 
            marginBottom: '16px',
            borderRadius: '12px',
            boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
          }}
        >
          <Title level={5}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏</Title>
          <Row gutter={[16, 16]}>
            <Col xs={24} md={8}>
              <Text strong>–ú–æ–¥–µ–ª—å:</Text>
              <Select
                value={selectedModel}
                onChange={setSelectedModel}
                style={{ width: '100%', marginTop: '8px' }}
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å"
                dropdownStyle={{ maxHeight: 300 }}
                size="large"
                optionLabelProp="label"
              >
                {availableModels.map(model => (
                  <Option 
                    key={model.value} 
                    value={model.value}
                    label={model.shortLabel}
                  >
                    <div style={{ padding: '8px 0' }}>
                      <div style={{ fontWeight: 'bold' }}>{model.label}</div>
                      <Text type="secondary" style={{ fontSize: '12px' }}>
                        {model.description}
                      </Text>
                    </div>
                  </Option>
                ))}
              </Select>
              {selectedModel.startsWith('vis-') && (
                <Text type="secondary" style={{ fontSize: '12px', marginTop: '4px', display: 'block' }}>
                  üí° –î–ª—è Vision-–º–æ–¥–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª"
                </Text>
              )}
            </Col>
            <Col xs={12} md={4}>
              <Text strong>–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:</Text>
              <div style={{ marginTop: '8px' }}>
                <input
                  type="range"
                  min="0"
                  max="2"
                  step="0.1"
                  value={temperature}
                  onChange={(e) => setTemperature(parseFloat(e.target.value))}
                  style={{ width: '100%' }}
                />
                <Text style={{ marginLeft: '8px' }}>{temperature}</Text>
              </div>
            </Col>
            <Col xs={12} md={4}>
              <Text strong>–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤:</Text>
              <Input
                type="number"
                value={maxTokens}
                onChange={(e) => setMaxTokens(parseInt(e.target.value))}
                style={{ marginTop: '8px' }}
                min={100}
                max={8000}
              />
            </Col>
            <Col xs={24}>
              <Text strong>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</Text>
              <TextArea
                value={systemPrompt}
                onChange={(e) => setSystemPrompt(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏..."
                style={{ marginTop: '8px' }}
                rows={3}
              />
            </Col>
          </Row>
        </Card>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
      {currentDialog ? (
        <Card 
          style={{ 
            flex: 1,
            borderRadius: '16px',
            boxShadow: '0 4px 24px rgba(0,0,0,0.10)',
            display: 'flex',
            alignItems: 'stretch',
            justifyContent: 'center',
            minHeight: '80vh',
            maxWidth: '100%',
            width: '100%',
            padding: '32px',
            margin: '0 auto',
            background: '#fff'
          }}
          bodyStyle={{ 
            padding: '16px',
            height: '100%',
            display: 'flex',
            flexDirection: 'column'
          }}
        >
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞ */}
          <div style={{ 
            padding: '8px 0', 
            borderBottom: '1px solid #f0f0f0',
            marginBottom: '16px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center'
          }}>
            <div>
              <Text strong>{currentDialog.name}</Text>
              <Text type="secondary" style={{ marginLeft: '8px', fontSize: '12px' }}>
                {formatDate(currentDialog.updatedAt)}
              </Text>
            </div>
            <Badge count={currentDialog.messages.length} showZero style={{ backgroundColor: '#52c41a' }} />
          </div>

          {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
          <div style={{ 
            flex: 1, 
            padding: '8px',
            minHeight: '80vh',
            marginBottom: 0
          }}>
            {currentDialog.messages.length === 0 ? (
              <div style={{ 
                textAlign: 'center', 
                padding: '40px 20px',
                color: '#8c8c8c'
              }}>
                <RobotOutlined style={{ fontSize: '48px', marginBottom: '16px' }} />
                <Title level={4} style={{ color: '#8c8c8c' }}>
                  –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!
                </Title>
                <Text>
                  –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ IRON FELIX AI –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –ø–æ–º–æ—á—å –≤–∞–º.
                </Text>
              </div>
            ) : (
              <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                {currentDialog.messages.map((message) => {
                  // –¢–æ—Ç–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                  let safeContent = '';
                  if (typeof message.content === 'string') {
                    safeContent = message.content;
                  } else if (Array.isArray(message.content)) {
                    safeContent = (message.content as any[]).map(String).join(' ');
                  } else if (message.content) {
                    safeContent = String(message.content);
                  } else {
                    safeContent = '';
                  }
                  if (
                    typeof safeContent !== 'string' ||
                    Array.isArray(safeContent) ||
                    (typeof safeContent === 'string' && safeContent.includes('$$typeof'))
                  ) {
                    safeContent = '[–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö]';
                  }
                  if (typeof safeContent === 'string') {
                    safeContent = safeContent.replace(/\\u[0-9a-fA-F]{4}/g, '').replace(/\[object Object\]/g, '');
                  }
                  let imageUrl = '';
                  if (typeof safeContent === 'string') {
                    // –ü—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ markdown
                    const match = safeContent.match(/!\[[^\]]*\]\(([^)]+)\)/);
                    if (match && match[1]) {
                      imageUrl = match[1];
                    }
                  }
                  let safeReasoning = typeof message.reasoning === 'string' ? message.reasoning : (message.reasoning ? String(message.reasoning) : '');
                  if (
                    typeof safeReasoning !== 'string' ||
                    Array.isArray(safeReasoning) ||
                    (typeof safeReasoning === 'string' && safeReasoning.includes('$$typeof'))
                  ) {
                    safeReasoning = '';
                  }
                  let safeFiles = Array.isArray(message.files)
                    ? message.files.map(f => {
                        if (!f || typeof f !== 'object' || !('name' in f)) {
                          return { name: typeof f === 'string' ? f : '[–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª]' };
                        }
                        return { ...f, name: typeof f.name === 'string' ? f.name : '[–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞]' };
                      })
                    : [];
                  return (
                    <div
                      key={message.id}
                      style={{
                        display: 'flex',
                        justifyContent: message.role === 'user' ? 'flex-end' : 'flex-start',
                        gap: '12px'
                      }}
                    >
                      {message.role === 'assistant' && (
                        <Avatar 
                          icon={<RobotOutlined />} 
                          style={{ backgroundColor: '#1890ff' }}
                        />
                      )}
                      <div style={{ maxWidth: '70%', minWidth: '200px' }}>
                        <Card
                          size="small"
                          style={{
                            backgroundColor: message.role === 'user' ? '#1890ff' : '#f5f5f5',
                            color: message.role === 'user' ? 'white' : 'inherit',
                            borderRadius: '12px',
                            border: 'none'
                          }}
                          bodyStyle={{ padding: '12px 16px' }}
                        >
                          <div style={{ 
                            display: 'flex', 
                            justifyContent: 'space-between', 
                            alignItems: 'flex-start',
                            marginBottom: '8px'
                          }}>
                            <Text 
                              strong 
                              style={{ 
                                color: message.role === 'user' ? 'black' : 'inherit',
                                fontSize: '12px'
                              }}
                            >
                              {message.role === 'user' ? user?.username || '–í—ã' : 'IRON FELIX AI'}
                            </Text>
                            <Space size="small">
                              <Text 
                                style={{ 
                                  color: message.role === 'user' ? 'black' : '#8c8c8c',
                                  fontSize: '11px'
                                }}
                              >
                                {formatTimestamp(message.timestamp)}
                              </Text>
                              <Tooltip title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å">
                                <Button
                                  type="text"
                                  size="small"
                                  icon={<CopyOutlined />}
                                  onClick={() => copyMessage(safeContent)}
                                  style={{ 
                                    color: message.role === 'user' ? 'black' : '#8c8c8c',
                                    padding: '0 4px'
                                  }}
                                />
                              </Tooltip>
                            </Space>
                          </div>
                          <div style={{ 
                            whiteSpace: 'pre-wrap',
                            lineHeight: '1.5',
                            color: message.role === 'user' ? 'black' : 'inherit'
                          }}>
                            {message.role === 'assistant' && imageUrl ? (
                              <img
                                src={imageUrl}
                                alt="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                                style={{
                                  maxWidth: '100%',
                                  borderRadius: 12,
                                  margin: '12px 0',
                                  boxShadow: '0 2px 8px rgba(0,0,0,0.08)'
                                }}
                              />
                            ) : message.role === 'assistant' ? (
                              // –ï—Å–ª–∏ markdown –±–µ–∑–æ–ø–∞—Å–µ–Ω, —Ä–µ–Ω–¥–µ—Ä–∏–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                              (typeof safeContent === 'string' && !safeContent.includes('$$typeof') && !Array.isArray(safeContent)) ? (
                                <ReactMarkdown
                                  components={{
                                    img: (props: any) => (
                                      <img
                                        {...props}
                                        style={{
                                          maxWidth: '100%',
                                          borderRadius: 12,
                                          margin: '12px 0',
                                          boxShadow: '0 2px 8px rgba(0,0,0,0.08)'
                                        }}
                                        alt={props.alt || 'image'}
                                      />
                                    )
                                  }}
                                >
                                  {safeContent}
                                </ReactMarkdown>
                              ) : (
                                safeContent
                              )
                            ) : (
                              safeContent
                            )}
                          </div>
                          {safeFiles.length > 0 && (
                            <div style={{ marginTop: '12px' }}>
                              <Divider style={{ margin: '8px 0' }} />
                              <Text style={{ 
                                color: message.role === 'user' ? 'rgba(255,255,255,0.8)' : '#8c8c8c',
                                fontSize: '12px'
                              }}>
                                –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
                              </Text>
                              <div style={{ marginTop: '8px' }}>
                                {safeFiles.map((file, index) => {
                                  if (typeof file.name !== 'string') {
                                    console.error('file.name is not a string:', file.name, file);
                                  }
                                  return (
                                    <Tag 
                                      key={index}
                                      icon={<FileOutlined />}
                                      style={{ 
                                        margin: '4px',
                                        backgroundColor: message.role === 'user' ? 'rgba(255,255,255,0.2)' : '#f0f0f0'
                                      }}
                                    >
                                      {typeof file.name === 'string' ? file.name : '–§–∞–π–ª'}
                                    </Tag>
                                  );
                                })}
                              </div>
                            </div>
                          )}
                          {safeReasoning && (
                            <div style={{ marginTop: '12px' }}>
                              <Divider style={{ margin: '8px 0' }} />
                              <details>
                                <summary style={{ 
                                  cursor: 'pointer',
                                  color: message.role === 'user' ? 'rgba(255,255,255,0.8)' : '#8c8c8c',
                                  fontSize: '12px'
                                }}>
                                  –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
                                </summary>
                                <div style={{ 
                                  marginTop: '8px',
                                  padding: '8px',
                                  backgroundColor: message.role === 'user' ? 'rgba(255,255,255,0.1)' : '#f0f0f0',
                                  borderRadius: '6px',
                                  fontSize: '12px',
                                  fontStyle: 'italic'
                                }}>
                                  {typeof safeReasoning === 'string' ? safeReasoning : JSON.stringify(safeReasoning)}
                                </div>
                              </details>
                            </div>
                          )}
                        </Card>
                      </div>
                      {message.role === 'user' && (
                        <Avatar 
                          icon={<UserOutlined />} 
                          style={{ backgroundColor: '#52c41a' }}
                        />
                      )}
                    </div>
                  );
                })}
                
                {isLoading && (
                  <div style={{
                    display: 'flex',
                    justifyContent: 'flex-start',
                    gap: '12px'
                  }}>
                    <Avatar 
                      icon={<RobotOutlined />} 
                      style={{ backgroundColor: '#1890ff' }}
                    />
                    <Card
                      size="small"
                      style={{
                        backgroundColor: '#f5f5f5',
                        borderRadius: '12px',
                        border: 'none',
                        minWidth: '200px'
                      }}
                      bodyStyle={{ padding: '12px 16px' }}
                    >
                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                        <Spin indicator={<LoadingOutlined style={{ fontSize: 16 }} spin />} />
                        <Text>AI –¥—É–º–∞–µ—Ç...</Text>
                      </div>
                    </Card>
                  </div>
                )}
                
                <div ref={messagesEndRef} />
              </div>
            )}
          </div>

          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
          <div style={{ 
            borderTop: '1px solid #f0f0f0',
            paddingTop: '16px'
          }}>
            {/* –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã */}
            {uploadedFiles.length > 0 && (
              <div style={{ marginBottom: '12px' }}>
                <Text type="secondary" style={{ fontSize: '12px', marginBottom: '8px', display: 'block' }}>
                  –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
                </Text>
                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
                  {uploadedFiles.map((file, index) => (
                    <Tag
                      key={index}
                      closable
                      onClose={() => removeFile(index)}
                      icon={<FileOutlined />}
                    >
                      {file.name}
                    </Tag>
                  ))}
                </div>
              </div>
            )}

            <div style={{ display: 'flex', gap: '12px', alignItems: 'flex-end' }}>
              <TextArea
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={selectedModel.startsWith('vis-') 
                  ? "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏..." 
                  : "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                }
                autoSize={{ minRows: 1, maxRows: 4 }}
                style={{ 
                  borderRadius: '8px',
                  resize: 'none'
                }}
                disabled={isLoading}
              />
              <Space direction="vertical" size="small">
                <Tooltip title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª">
                  <Button
                    icon={<FileOutlined />}
                    onClick={() => fileInputRef.current?.click()}
                    disabled={isLoading}
                    style={{ 
                      borderRadius: '8px',
                      height: '40px',
                      width: '40px'
                    }}
                  />
                </Tooltip>
                <Button
                  type="primary"
                  icon={<SendOutlined />}
                  onClick={sendMessage}
                  loading={isLoading}
                  disabled={!inputValue.trim()}
                  style={{ 
                    borderRadius: '8px',
                    height: '40px',
                    width: '40px'
                  }}
                />
              </Space>
            </div>
            <input
              ref={fileInputRef}
              type="file"
              multiple
              style={{ display: 'none' }}
              onChange={(e) => handleFileUpload(e.target.files)}
            />
            <div style={{ 
              marginTop: '8px',
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center'
            }}>
              <Text type="secondary" style={{ fontSize: '12px' }}>
                –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
              </Text>
              <Badge 
                count={currentDialog.messages.length} 
                showZero 
                style={{ backgroundColor: '#52c41a' }}
              />
            </div>
          </div>
        </Card>
      ) : (
        <Card 
          style={{ 
            flex: 1,
            borderRadius: '12px',
            boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}
        >
          <div style={{ textAlign: 'center', padding: '40px 20px' }}>
            <RobotOutlined style={{ fontSize: '64px', marginBottom: '16px', color: '#1890ff' }} />
            <Title level={3} style={{ color: '#8c8c8c' }}>
              –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π
            </Title>
            <Text type="secondary">
              –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å IRON FELIX AI
            </Text>
            <div style={{ marginTop: '24px' }}>
              <Button 
                type="primary" 
                size="large"
                icon={<PlusOutlined />}
                onClick={() => createNewDialog()}
              >
                –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
              </Button>
            </div>
          </div>
        </Card>
      )}

      {/* Drawer –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ */}
      <Drawer
        title="–ú–æ–∏ –¥–∏–∞–ª–æ–≥–∏"
        placement="right"
        width={400}
        onClose={() => setShowDialogs(false)}
        open={showDialogs}
        extra={
          <Button 
            type="primary" 
            icon={<PlusOutlined />}
            onClick={() => createNewDialog()}
          >
            –ù–æ–≤—ã–π
          </Button>
        }
      >
        <List
          dataSource={dialogs}
          renderItem={(dialog) => (
            <List.Item
              actions={[
                <Popconfirm
                  title="–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥?"
                  onConfirm={() => deleteDialog(dialog.id)}
                  okText="–î–∞"
                  cancelText="–ù–µ—Ç"
                >
                  <Button 
                    type="text" 
                    danger 
                    icon={<DeleteOutlined />}
                    size="small"
                    onClick={e => e.stopPropagation()}
                  />
                </Popconfirm>
              ]}
              style={{
                cursor: 'pointer',
                backgroundColor: currentDialog?.id === dialog.id ? '#f0f8ff' : 'transparent',
                borderRadius: '8px',
                padding: '8px'
              }}
              onClick={() => {
                setCurrentDialog(dialog);
                setShowDialogs(false);
              }}
            >
              <List.Item.Meta
                avatar={<Avatar icon={<MessageOutlined />} />}
                title={typeof getDialogName(dialog) === 'string' ? getDialogName(dialog) : '[–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è]'}
                description={
                  <div>
                    <Text type="secondary" style={{ fontSize: '12px' }}>
                      {formatDate(dialog.updatedAt)}
                    </Text>
                    <Badge 
                      count={dialog.messages.length} 
                      showZero 
                      size="small"
                      style={{ marginLeft: '8px' }}
                    />
                  </div>
                }
              />
            </List.Item>
          )}
        />
      </Drawer>

      {/* Drawer –¥–ª—è –ø—Ä–µ—Å–µ—Ç–æ–≤ */}
      <Drawer
        title="–ü—Ä–µ—Å–µ—Ç—ã"
        placement="right"
        width={400}
        onClose={() => setShowPresets(false)}
        open={showPresets}
        extra={
          <Button 
            type="primary" 
            icon={<PlusOutlined />}
            onClick={createPreset}
          >
            –°–æ–∑–¥–∞—Ç—å
          </Button>
        }
      >
        <List
          dataSource={presets}
          renderItem={(preset) => (
            <List.Item
              actions={[
                <Button 
                  type="text" 
                  icon={<EditOutlined />}
                  size="small"
                />,
                <Popconfirm
                  title="–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç?"
                  onConfirm={() => setPresets(prev => prev.filter(p => p.id !== preset.id))}
                  okText="–î–∞"
                  cancelText="–ù–µ—Ç"
                >
                  <Button 
                    type="text" 
                    danger 
                    icon={<DeleteOutlined />}
                    size="small"
                  />
                </Popconfirm>
              ]}
            >
              <List.Item.Meta
                avatar={<Avatar icon={<BookOutlined />} />}
                title={preset.name}
                description={
                  <div>
                    <Text type="secondary" style={{ fontSize: '12px' }}>
                      {availableModels.find(m => m.value === preset.model)?.shortLabel || preset.model}
                    </Text>
                    <br />
                    <Text type="secondary" style={{ fontSize: '12px' }}>
                      –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {preset.temperature} | –¢–æ–∫–µ–Ω—ã: {preset.maxTokens}
                    </Text>
                  </div>
                }
              />
              <Button 
                type="primary" 
                size="small"
                onClick={() => applyPreset(preset)}
              >
                –ü—Ä–∏–º–µ–Ω–∏—Ç—å
              </Button>
            </List.Item>
          )}
        />
      </Drawer>
    </div>
  );
};

export default ChatBot; 