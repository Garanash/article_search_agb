import React, { useEffect, useState, useRef } from 'react';
import { Button, Input, Card, List, Avatar, Typography, Divider, Select, Space, Slider, Modal, Spin, message as antdMessage, Form, Popconfirm } from 'antd';
import { PlusOutlined, SendOutlined, RobotOutlined, UserOutlined, DeleteOutlined, SettingOutlined, EditOutlined } from '@ant-design/icons';
import ReactMarkdown from 'react-markdown';
import {
  getChats, createChat, getChatHistory, sendMessage, deleteChat, updateChat, getAvailableModels, getBalance
} from './VseGptApi';

const { TextArea } = Input;
const { Title, Text } = Typography;

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª—é–±–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function safeContent(content: any): string {
  if (typeof content === 'string') return content;
  if (React.isValidElement?.(content)) return '[react element]';
  if (Array.isArray(content)) return content.map(safeContent).join(' ');
  if (content && typeof content === 'object') {
    if (content.$$typeof) return '[react element]';
    return JSON.stringify(content);
  }
  if (content !== undefined && content !== null) return String(content);
  return '[invalid content]';
}

function isValidMessage(msg: any): msg is { id: string; role: string; content: string } {
  return (
    msg &&
    typeof msg === 'object' &&
    typeof msg.id !== 'undefined' &&
    (msg.role === 'user' || msg.role === 'assistant') &&
    typeof msg.content === 'string'
  );
}

// –£–¥–∞–ª—è—é SafeMarkdown –∏ –∑–∞–º–µ–Ω—è—é —Ä–µ–Ω–¥–µ—Ä –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π <pre>

// TODO: –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å API VseGPT (–ø–æ–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥)
// –ú–æ–¥–µ–ª–∏ VseGPT –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–≥—Ä—É–ø–ø–∞–º) –∏–∑ https://vsegpt.ru/Docs/Models
const vseGptModels = [
  {
    label: 'OpenAI',
    options: [
      { id: 'openai/gpt-4o', name: 'GPT-4o', type: 'text' },
      { id: 'openai/gpt-4-turbo', name: 'GPT-4 Turbo', type: 'text' },
      { id: 'openai/gpt-4', name: 'GPT-4', type: 'text' },
      { id: 'openai/gpt-3.5-turbo', name: 'GPT-3.5 Turbo', type: 'text' },
      { id: 'openai/dall-e-3', name: 'DALL-E 3', type: 'image' },
    ]
  },
  {
    label: 'Anthropic',
    options: [
      { id: 'anthropic/claude-3-opus', name: 'Claude 3 Opus', type: 'text' },
      { id: 'anthropic/claude-3-sonnet', name: 'Claude 3 Sonnet', type: 'text' },
      { id: 'anthropic/claude-3-haiku', name: 'Claude 3 Haiku', type: 'text' },
      { id: 'anthropic/claude-2.1', name: 'Claude 2.1', type: 'text' },
    ]
  },
  {
    label: 'Google',
    options: [
      { id: 'google/gemini-2.5-pro', name: 'Gemini 2.5 Pro', type: 'text' },
      { id: 'google/gemini-1.5-flash', name: 'Gemini 1.5 Flash', type: 'text' },
      { id: 'google/gemini-1.5-pro', name: 'Gemini 1.5 Pro', type: 'text' },
      { id: 'google/gemini-pro', name: 'Gemini Pro', type: 'text' },
    ]
  },
  {
    label: '–ö–æ–¥–æ–≤—ã–µ',
    options: [
      { id: 'deepseek/deepseek-coder', name: 'DeepSeek Coder', type: 'code' },
      { id: 'openai/gpt-4o-coder', name: 'GPT-4o Coder', type: 'code' },
      { id: 'openai/gpt-4-coder', name: 'GPT-4 Coder', type: 'code' },
      { id: 'openai/gpt-3.5-coder', name: 'GPT-3.5 Coder', type: 'code' },
    ]
  },
  {
    label: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    options: [
      { id: 'openai/dall-e-3', name: 'DALL-E 3', type: 'image' },
      { id: 'stability/stable-diffusion-xl', name: 'Stable Diffusion XL', type: 'image' },
      { id: 'stability/stable-diffusion', name: 'Stable Diffusion', type: 'image' },
    ]
  },
  {
    label: '–î—Ä—É–≥–∏–µ',
    options: [
      { id: 'mistral/mistral-large', name: 'Mistral Large', type: 'text' },
      { id: 'mistral/mistral-medium', name: 'Mistral Medium', type: 'text' },
      { id: 'mistral/mistral-small', name: 'Mistral Small', type: 'text' },
      { id: 'yandex/yandex-gpt', name: 'YandexGPT', type: 'text' },
      { id: 'phind/phind-codellama', name: 'Phind CodeLlama', type: 'code' },
    ]
  },
];

// –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–¥–µ–ª–µ–π
const systemPrompts = {
  text: `–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ç–∫–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.`,
  
  code: `–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü–æ–º–æ–≥–∞–π —Å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–¥–∞, –æ—Ç–ª–∞–¥–∫–æ–π, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –í—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π –ø–æ–ª–Ω—ã–µ, —Ä–∞–±–æ—á–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ best practices –∏ —Å–ª–µ–¥—É–π –ø—Ä–∏–Ω—Ü–∏–ø–∞–º clean code.`,
  
  image: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–π –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –û–ø–∏—Å—ã–≤–∞–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∏ –¥–∞–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.`,
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
function getSystemPrompt(modelId: string): string {
  const model = vseGptModels.flatMap(group => group.options).find(m => m.id === modelId);
  const type = model?.type || 'text';
  return systemPrompts[type as keyof typeof systemPrompts] || systemPrompts.text;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –º–æ–¥–µ–ª–∏
function getModelType(modelId: string): string {
  const model = vseGptModels.flatMap(group => group.options).find(m => m.id === modelId);
  return model?.type || 'text';
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
function isImageModel(modelId: string): boolean {
  return getModelType(modelId) === 'image';
}

const defaultParams = {
  model: 'openai/gpt-4o',
  temperature: 0.7,
  top_p: 1,
  max_tokens: 2048,
  system: '',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
function renderMessageContent(content: string, token?: string) {
  console.log('renderMessageContent input:', content);
  
  // –ò—â–µ–º –ü–û–õ–ù–´–ô URL (–≤–∫–ª—é—á–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
  const imageUrlMatch = content.match(/https?:\/\/[^\s]+/i);
  
  console.log('imageUrlMatch:', imageUrlMatch);
  
  if (imageUrlMatch) {
    const originalImageUrl = imageUrlMatch[0];
    console.log('Found image URL:', originalImageUrl);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏-endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const proxyImageUrl = `/api/chat/image-proxy?image_url=${encodeURIComponent(originalImageUrl)}`;
    console.log('Proxy image URL:', proxyImageUrl);
    
    // –£–±–∏—Ä–∞–µ–º URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ
    const textContent = content.replace(originalImageUrl, '').replace(/üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n?/g, '').trim();
    console.log('Text content after removing URL:', textContent);
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    const ImageWithAuth = () => {
      const [imageSrc, setImageSrc] = React.useState<string>('');
      const [loading, setLoading] = React.useState(true);
      const [error, setError] = React.useState(false);
      
      React.useEffect(() => {
        if (!token) {
          setError(true);
          setLoading(false);
          return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ fetch —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        fetch(proxyImageUrl, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        })
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
          }
          return response.blob();
        })
        .then(blob => {
          const url = URL.createObjectURL(blob);
          setImageSrc(url);
          setLoading(false);
        })
        .catch(error => {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
          setError(true);
          setLoading(false);
        });
      }, [proxyImageUrl, token]);
      
      if (loading) {
        return (
          <div style={{ textAlign: 'center', padding: '20px' }}>
            <Spin size="large" />
            <div style={{ marginTop: 8, color: '#666' }}>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...</div>
          </div>
        );
      }
      
      if (error) {
        return (
          <div style={{ textAlign: 'center', padding: '20px', color: '#ff4d4f' }}>
            <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
            <div style={{ fontSize: '12px', marginTop: 4 }}>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</div>
          </div>
        );
      }
      
      return (
        <img 
          src={imageSrc} 
          alt="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" 
          style={{ 
            maxWidth: '100%', 
            maxHeight: '400px', 
            borderRadius: '8px',
            boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
            border: '1px solid #e0e0e0'
          }} 
          onError={() => {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            setError(true);
          }}
        />
      );
    };
    
    return (
      <div style={{ width: '100%' }}>
        {textContent && (
          <div style={{ marginBottom: 8 }}>
            <pre style={{ margin: 0, fontFamily: 'inherit', whiteSpace: 'pre-wrap', wordBreak: 'break-word', background: 'none', border: 'none', padding: 0 }}>{textContent}</pre>
          </div>
        )}
        <div style={{ textAlign: 'center', marginTop: 8 }}>
          <ImageWithAuth />
        </div>
      </div>
    );
  }
  
  console.log('No image URL found, treating as text');
  // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
  return (
    <pre style={{ margin: 0, fontFamily: 'inherit', whiteSpace: 'pre-wrap', wordBreak: 'break-word', background: 'none', border: 'none', padding: 0 }}>{content}</pre>
  );
}

const VseGptChat: React.FC<{ token: string }> = ({ token }) => {
  const [chats, setChats] = useState<any[]>([]);
  const [selectedChat, setSelectedChat] = useState<any | null>(null);
  const [messages, setMessages] = useState<any[]>([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [settingsOpen, setSettingsOpen] = useState(false);
  const [newChatModal, setNewChatModal] = useState(false);
  const [newChatParams, setNewChatParams] = useState<any>(defaultParams);
  const [balance, setBalance] = useState<any>(null);
  const [availableModels, setAvailableModels] = useState<any[]>([]);
  const [form] = Form.useForm();
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤
  useEffect(() => {
    (async () => {
      try {
        const data = await getChats(token);
        setChats(Array.isArray(data) ? data : []);
      } catch (e) {
        antdMessage.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤');
      }
    })();
  }, [token]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
  useEffect(() => {
    (async () => {
      try {
        const [balanceData, modelsData] = await Promise.all([
          getBalance(token).catch(() => null),
          getAvailableModels(token).catch(() => [])
        ]);
        setBalance(balanceData);
        setAvailableModels(Array.isArray(modelsData) ? modelsData : []);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ –º–æ–¥–µ–ª–µ–π:', e);
      }
    })();
  }, [token]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
  useEffect(() => {
    if (!selectedChat) return;
    (async () => {
      try {
        const data = await getChatHistory(token, selectedChat.id || selectedChat.session_id);
        console.log('getChatHistory raw data:', data);
        setMessages(Array.isArray(data) ? data : []);
      } catch (e) {
        setMessages([]);
        antdMessage.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞');
      }
    })();
  }, [selectedChat, token]);

  // –°–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, selectedChat]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
  const handleCreateChat = async () => {
    try {
      const chat = await createChat(token, newChatParams);
      setChats(prev => [chat, ...prev]);
      setSelectedChat(chat);
      setNewChatModal(false);
      setNewChatParams(defaultParams);
      antdMessage.success('–ß–∞—Ç —Å–æ–∑–¥–∞–Ω');
    } catch (e) {
      antdMessage.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞');
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSend = async () => {
    if (!input.trim() || !selectedChat) return;
    setLoading(true);
    const userMsg = { id: Date.now().toString(), role: 'user', content: safeContent(input) };
    setMessages(prev => [...prev, userMsg]);
    setInput('');
    
    try {
      const modelId = selectedChat.model || defaultParams.model;
      const isImage = isImageModel(modelId);
      
      let params: any;
      
      if (isImage) {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        params = {
          model: modelId,
          messages: [
            { role: 'user', content: input }
          ],
          temperature: selectedChat.temperature || defaultParams.temperature,
          top_p: selectedChat.top_p || defaultParams.top_p,
          max_tokens: selectedChat.max_tokens || defaultParams.max_tokens,
          system: selectedChat.system || getSystemPrompt(modelId),
          session_id: selectedChat.id || selectedChat.session_id,
        };
      } else {
        // –û–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
        params = {
          model: modelId,
          messages: [
            ...messages.filter((m: any) => m.role === 'user' || m.role === 'assistant'),
            { role: 'user', content: input }
          ],
          temperature: selectedChat.temperature || defaultParams.temperature,
          top_p: selectedChat.top_p || defaultParams.top_p,
          max_tokens: selectedChat.max_tokens || defaultParams.max_tokens,
          system: selectedChat.system || getSystemPrompt(modelId),
          session_id: selectedChat.id || selectedChat.session_id,
        };
      }
      
      const data = await sendMessage(token, params);
      console.log('sendMessage response:', data);
      
      let content = '[invalid content]';
      if (isImage) {
        // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—â–µ–º URL –≤ –æ—Ç–≤–µ—Ç–µ
        if (data.choices?.[0]?.message?.content) {
          content = data.choices[0].message.content;
          // –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
          if (typeof content === 'string' && content.includes('http')) {
            content = `üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n${content}`;
          }
        }
      } else {
        // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if (typeof data.choices?.[0]?.message?.content === 'string') {
          content = data.choices[0].message.content;
        }
      }
      
      const botMsg = { id: (Date.now() + 1).toString(), role: 'assistant', content: safeContent(content) };
      setMessages(prev => [...prev, botMsg]);
    } catch (e: any) {
      setMessages(prev => [...prev, { id: (Date.now() + 1).toString(), role: 'assistant', content: safeContent(e.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞.') }]);
      antdMessage.error(e.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞.');
    }
    setLoading(false);
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
  const handleDeleteChat = async (chat: any) => {
    try {
      await deleteChat(token, chat.id || chat.session_id);
      setChats(prev => prev.filter(c => (c.id || c.session_id) !== (chat.id || chat.session_id)));
      if (selectedChat && (selectedChat.id || selectedChat.session_id) === (chat.id || chat.session_id)) {
        setSelectedChat(null);
        setMessages([]);
      }
      antdMessage.success('–ß–∞—Ç —É–¥–∞–ª—ë–Ω');
    } catch (e) {
      antdMessage.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞');
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–∞—Ç–∞
  const handleUpdateChat = async (values: any) => {
    try {
      const updated = await updateChat(token, selectedChat.id || selectedChat.session_id, values);
      setChats(prev => prev.map(c => (c.id || c.session_id) === (updated.id || updated.session_id) ? updated : c));
      setSelectedChat(updated);
      setSettingsOpen(false);
      antdMessage.success('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (e) {
      antdMessage.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞');
    }
  };

  // –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
  const safeMessages = messages
    .filter((m: any) => {
      const valid = m && (typeof m.id === 'string' || typeof m.id === 'number') && (typeof m.content === 'string');
      if (!valid) {
        console.error('Invalid message skipped:', m);
      }
      return valid;
    })
    .map((m: any, idx: number) => {
      const safe = safeContent(m.content);
      if (typeof m.content !== 'string') {
        console.error('Non-string content in message:', m, 'typeof:', typeof m.content, 'safeContent:', safe);
      }
      return {
        ...m,
        content: safe
      };
    });

  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    console.log('All messages:', messages);
    safeMessages.forEach((msg, idx) => {
      console.log(`safeMessages[${idx}]:`, msg, 'typeof content:', typeof msg.content);
    });
    if (messages.some((m: any) => typeof m.content !== 'string')) {
      console.error('Messages with non-string content:', messages);
    }
  }, [messages, safeMessages]);

  return (
    <div style={{ display: 'flex', height: '100vh', background: '#e9ecf1' }}>
      {/* –°–∞–π–¥–±–∞—Ä */}
      <div style={{ width: 340, background: '#f7f8fa', color: '#23272f', display: 'flex', flexDirection: 'column', height: '100vh', borderRight: '1px solid #e0e0e0', position: 'relative', zIndex: 2, boxShadow: '2px 0 8px #e0e0e033' }}>
        <div style={{ padding: '24px 24px 0 24px', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
          <Title level={4} style={{ color: '#23272f', margin: 0, letterSpacing: 1 }}>–ß–∞—Ç—ã</Title>
          <Button type="primary" icon={<PlusOutlined />} onClick={() => setNewChatModal(true)} style={{ background: '#FCB813', color: '#222', border: 'none', borderRadius: 8, fontWeight: 600 }} />
        </div>
        <Divider style={{ background: '#e0e0e0', margin: '12px 0' }} />
        <div style={{ flex: 1, overflowY: 'auto', padding: '0 16px 0 16px' }}>
          <List
            itemLayout="horizontal"
            dataSource={chats}
            renderItem={chat => (
              <Card
                key={chat.id || chat.session_id}
                style={{ marginBottom: 14, background: selectedChat && (selectedChat.id || selectedChat.session_id) === (chat.id || chat.session_id) ? '#fffbe6' : '#f7f8fa', color: '#23272f', border: selectedChat && (selectedChat.id || selectedChat.session_id) === (chat.id || chat.session_id) ? '2px solid #FCB813' : '1px solid #e0e0e0', cursor: 'pointer', borderRadius: 10, boxShadow: selectedChat && (selectedChat.id || selectedChat.session_id) === (chat.id || chat.session_id) ? '0 2px 12px #FCB81333' : 'none', transition: 'all 0.2s' }}
                onClick={() => setSelectedChat(chat)}
                bodyStyle={{ padding: 12, display: 'flex', alignItems: 'center', gap: 12 }}
                actions={[
                  <Popconfirm title="–£–¥–∞–ª–∏—Ç—å —á–∞—Ç?" onConfirm={e => { e?.stopPropagation(); handleDeleteChat(chat); }} onCancel={e => e?.stopPropagation()} okText="–î–∞" cancelText="–ù–µ—Ç">
                    <DeleteOutlined style={{ color: '#d4380d' }} onClick={e => e.stopPropagation()} />
                  </Popconfirm>,
                  <SettingOutlined style={{ color: '#1890ff' }} onClick={e => { e.stopPropagation(); setSelectedChat(chat); setSettingsOpen(true); }} />
                ]}
              >
                <Avatar size={40} style={{ background: '#FCB813', color: '#222', fontWeight: 700 }}>
                  {typeof chat.avatar === 'string' || typeof chat.avatar === 'number' ? chat.avatar : ''}
                </Avatar>
                <div style={{ flex: 1 }}>
                  <div style={{ fontWeight: 600, color: '#23272f', fontSize: 16 }}>{safeContent(chat.title || chat.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</div>
                  <div style={{ color: '#888', fontSize: 13, whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>{safeContent(chat.model)}</div>
                </div>
              </Card>
            )}
          />
        </div>
      </div>
      {/* –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å ‚Äî —á–∞—Ç */}
      <div style={{ flex: 1, display: 'flex', flexDirection: 'column', position: 'relative', height: '100vh', background: '#fff' }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <div style={{ padding: '32px 32px 0 32px', display: 'flex', alignItems: 'center', gap: 16 }}>
          <Title level={4} style={{ color: '#23272f', marginBottom: 24, flex: 1 }}>{safeContent(selectedChat?.title || selectedChat?.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</Title>
          {balance && (
            <div style={{ fontSize: 12, color: '#666', textAlign: 'right' }}>
              <div>–ë–∞–ª–∞–Ω—Å VseGPT:</div>
              <div style={{ fontWeight: 600, color: '#1890ff' }}>
                {balance.credits || balance.balance || 'N/A'}
              </div>
            </div>
          )}
          <Button icon={<SettingOutlined />} onClick={() => setSettingsOpen(true)} />
        </div>
        {/* –°–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ */}
        <div style={{ flex: 1, overflowY: 'auto', padding: '0 32px 0 32px', display: 'flex', flexDirection: 'column', gap: 18 }}>
          {safeMessages.map((msg: any, idx: number) => {
            const safe = safeContent(msg.content);
            console.log(`render msg[${idx}]`, msg, 'typeof content:', typeof msg.content, 'safe:', safe);
            return (
              <div key={msg.id} style={{ display: 'flex', justifyContent: msg.role === 'user' ? 'flex-end' : 'flex-start' }}>
                <Card style={{ maxWidth: '60%', background: msg.role === 'user' ? '#FCB813' : '#e6e8ea', color: '#23272f', borderRadius: msg.role === 'user' ? '16px 16px 4px 16px' : '16px 16px 16px 4px', marginBottom: 4, boxShadow: '0 2px 8px rgba(0,0,0,0.06)', fontSize: 17, fontWeight: 500 }} bodyStyle={{ padding: 18, display: 'flex', alignItems: 'center', gap: 10 }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: 12, width: '100%' }}>
                    {msg.role === 'user' ? <Avatar icon={<UserOutlined />} style={{ background: '#FCB813', color: '#23272f' }} /> : <Avatar icon={<RobotOutlined />} style={{ background: '#e6e8ea', color: '#23272f' }} />}
                    <div style={{ width: '100%' }}>
                      {renderMessageContent(safe, token)}
                    </div>
                  </div>
                </Card>
              </div>
            );
          })}
          {loading && (
            <div style={{ display: 'flex', alignItems: 'center', gap: 12, margin: '16px 0 0 8px', color: '#888', fontSize: 17 }}>
              <Spin size="small" />
              <span>–ë–æ—Ç –¥—É–º–∞–µ—Ç...</span>
            </div>
          )}
          <div ref={messagesEndRef} />
          {/* –û–∫–Ω–æ –≤–≤–æ–¥–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤–Ω–∏–∑—É –æ–±–ª–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π */}
          <div style={{ background: '#fff', borderTop: '1px solid #eee', padding: '16px 0 0 0', display: 'flex', alignItems: 'center', gap: 16, marginTop: 'auto' }}>
            <TextArea
              value={input}
              onChange={e => setInput(e.target.value)}
              onPressEnter={e => { if (!e.shiftKey) { e.preventDefault(); handleSend(); } }}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
              autoSize={{ minRows: 1, maxRows: 4 }}
              style={{ flex: 1, borderRadius: 8, fontSize: 16, background: '#f8f9fa', color: '#23272f', border: '1px solid #FCB813', boxShadow: '0 2px 8px #FCB81311' }}
              disabled={loading || !selectedChat}
            />
            <Button
              type="primary"
              icon={<SendOutlined />}
              onClick={handleSend}
              style={{ height: 48, width: 56, fontSize: 22, background: '#FCB813', color: '#222', border: 'none', borderRadius: 8, boxShadow: '0 2px 8px #FCB81322' }}
              disabled={loading || !input.trim() || !selectedChat}
            />
          </div>
        </div>
      </div>
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ */}
      <Modal
        open={newChatModal}
        title="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç"
        onCancel={() => setNewChatModal(false)}
        onOk={handleCreateChat}
        okText="–°–æ–∑–¥–∞—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
      >
        <Form layout="vertical" form={form} initialValues={newChatParams} onValuesChange={(_, all) => setNewChatParams(all)}>
          <Form.Item label="–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞" name="title">
            <Input placeholder="–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è" />
          </Form.Item>
          <Form.Item label="–ú–æ–¥–µ–ª—å" name="model" rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å' }]}> 
            <Select
              options={vseGptModels.map(group => ({
                label: group.label,
                options: group.options.map(m => ({ label: m.name, value: m.id }))
              }))}
              showSearch
              optionFilterProp="label"
              onChange={(value) => {
                const systemPrompt = getSystemPrompt(value);
                form.setFieldsValue({ system: systemPrompt });
                setNewChatParams((prev: any) => ({ ...prev, model: value, system: systemPrompt }));
              }}
            />
          </Form.Item>
          <Form.Item label="System prompt" name="system">
            <Input.TextArea 
              placeholder="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ —Ç–∏–ø—É –º–æ–¥–µ–ª–∏)" 
              rows={4}
            />
          </Form.Item>
          <Form.Item label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" name="temperature">
            <Slider min={0} max={2} step={0.01} tooltip={{ open: true }} />
          </Form.Item>
          <Form.Item label="Top_p" name="top_p">
            <Slider min={0} max={1} step={0.01} tooltip={{ open: true }} />
          </Form.Item>
          <Form.Item label="Max tokens" name="max_tokens">
            <Input type="number" min={1} max={4096} />
          </Form.Item>
        </Form>
      </Modal>
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ */}
      <Modal
        open={settingsOpen}
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"
        onCancel={() => setSettingsOpen(false)}
        onOk={() => form.submit()}
        okText="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
      >
        <Form layout="vertical" form={form} initialValues={selectedChat || {}} onFinish={handleUpdateChat}>
          <Form.Item label="–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞" name="title">
            <Input placeholder="–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è" />
          </Form.Item>
          <Form.Item label="–ú–æ–¥–µ–ª—å" name="model" rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å' }]}> 
            <Select
              options={vseGptModels.map(group => ({
                label: group.label,
                options: group.options.map(m => ({ label: m.name, value: m.id }))
              }))}
              showSearch
              optionFilterProp="label"
              onChange={(value) => {
                const systemPrompt = getSystemPrompt(value);
                form.setFieldsValue({ system: systemPrompt });
              }}
            />
          </Form.Item>
          <Form.Item label="System prompt" name="system">
            <Input.TextArea 
              placeholder="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ —Ç–∏–ø—É –º–æ–¥–µ–ª–∏)" 
              rows={4}
            />
          </Form.Item>
          <Form.Item label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" name="temperature">
            <Slider min={0} max={2} step={0.01} tooltip={{ open: true }} />
          </Form.Item>
          <Form.Item label="Top_p" name="top_p">
            <Slider min={0} max={1} step={0.01} tooltip={{ open: true }} />
          </Form.Item>
          <Form.Item label="Max tokens" name="max_tokens">
            <Input type="number" min={1} max={4096} />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default VseGptChat; 