#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Ä–æ–ª–µ–π –∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from sqlalchemy import create_engine, text
from app.database import SQLALCHEMY_DATABASE_URL, get_db, engine
from app.models import Base, Role, Department, Permission, UserRole
import json

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ä–æ–ª–µ–π –∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤...")
    Base.metadata.create_all(bind=engine, tables=[
        Role.__table__,
        Department.__table__,
        Permission.__table__,
        UserRole.__table__
    ])
    print("‚úì –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

def populate_initial_data():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    with engine.connect() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        result = conn.execute(text("SELECT COUNT(*) FROM roles"))
        if result.scalar() > 0:
            print("–î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ...")
            return
        
        print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–æ–ª–µ–π...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏
        roles_data = [
            {
                'name': 'user',
                'description': '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                'permissions': json.dumps(['read_own_data', 'create_requests'])
            },
            {
                'name': 'manager',
                'description': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
                'permissions': json.dumps(['read_department_data', 'approve_documents', 'manage_users'])
            },
            {
                'name': 'admin',
                'description': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã',
                'permissions': json.dumps(['all'])
            }
        ]
        
        for role_data in roles_data:
            conn.execute(text("""
                INSERT INTO roles (name, description, permissions, created_at, updated_at)
                VALUES (:name, :description, :permissions, NOW(), NOW())
            """), role_data)
        
        print("‚úì –ë–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã
        departments_data = [
            {
                'name': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û',
                'description': '–û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è'
            },
            {
                'name': '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'description': '–û—Ç–¥–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤'
            },
            {
                'name': '–õ–æ–≥–∏—Å—Ç–∏–∫–∞',
                'description': '–û—Ç–¥–µ–ª –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ –ø–æ—Å—Ç–∞–≤–æ–∫'
            },
            {
                'name': '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
                'description': '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏'
            },
            {
                'name': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è',
                'description': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç–¥–µ–ª –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π —É—á–µ—Ç'
            },
            {
                'name': 'HR',
                'description': '–û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º'
            }
        ]
        
        for dept_data in departments_data:
            conn.execute(text("""
                INSERT INTO departments (name, description, created_at, updated_at)
                VALUES (:name, :description, NOW(), NOW())
            """), dept_data)
        
        print("‚úì –ë–∞–∑–æ–≤—ã–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        permissions_data = [
            {'name': 'read_own_data', 'description': '–ß—Ç–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'resource': 'user', 'action': 'read'},
            {'name': 'create_requests', 'description': '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤', 'resource': 'requests', 'action': 'create'},
            {'name': 'read_department_data', 'description': '–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞', 'resource': 'department', 'action': 'read'},
            {'name': 'approve_documents', 'description': '–û–¥–æ–±—Ä–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', 'resource': 'documents', 'action': 'approve'},
            {'name': 'manage_users', 'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'resource': 'users', 'action': 'manage'},
            {'name': 'view_analytics', 'description': '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', 'resource': 'analytics', 'action': 'read'},
            {'name': 'all', 'description': '–í—Å–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞', 'resource': '*', 'action': '*'}
        ]
        
        for perm_data in permissions_data:
            conn.execute(text("""
                INSERT INTO permissions (name, description, resource, action, created_at)
                VALUES (:name, :description, :resource, :action, NOW())
            """), perm_data)
        
        print("‚úì –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # Commit all changes
        conn.commit()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–æ–ª–µ–π –∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤...")
    
    try:
        create_tables()
        populate_initial_data()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
