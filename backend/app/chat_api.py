from fastapi import APIRouter, Depends, HTTPException, WebSocket, WebSocketDisconnect
from fastapi.security import HTTPBearer
from typing import List, Dict, Optional
from pydantic import BaseModel
from datetime import datetime
import json
import asyncio
from sqlalchemy.orm import Session
from .database import get_db
from .auth import get_current_user
from .models import User
from fastapi.responses import JSONResponse

router = APIRouter(prefix="/chat", tags=["chat"])
security = HTTPBearer()

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class MessageCreate(BaseModel):
    botId: str
    content: str

class MessageResponse(BaseModel):
    id: str
    content: str
    sender: str  # 'user' –∏–ª–∏ 'bot'
    timestamp: str
    botId: str
    userId: str

class BotResponse(BaseModel):
    id: str
    name: str
    description: str
    avatar: str
    role: str
    isOnline: bool
    lastMessage: Optional[str] = None
    unreadCount: Optional[int] = 0

class ChatSessionResponse(BaseModel):
    id: str
    userId: str
    botId: str
    createdAt: str
    lastActivity: str
    messageCount: int

class SessionCreate(BaseModel):
    botId: str

# –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥—É—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
BOTS_DATA = {
    'admin': [
        {
            'id': 'admin-support',
            'name': '–ê–¥–º–∏–Ω –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
            'description': '–ü–æ–º–æ—â—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏',
            'avatar': 'ü§ñ',
            'role': 'admin',
            'isOnline': True
        },
        {
            'id': 'system-bot',
            'name': '–°–∏—Å—Ç–µ–º–Ω—ã–π –ë–æ—Ç',
            'description': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
            'avatar': '‚öôÔ∏è',
            'role': 'admin',
            'isOnline': True
        }
    ],
    'manager': [
        {
            'id': 'sales-bot',
            'name': '–ë–æ—Ç –ü—Ä–æ–¥–∞–∂',
            'description': '–ü–æ–º–æ—â—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
            'avatar': 'üí∞',
            'role': 'manager',
            'isOnline': True
        },
        {
            'id': 'analytics-bot',
            'name': '–ê–Ω–∞–ª–∏—Ç–∏–∫ –ë–æ—Ç',
            'description': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã',
            'avatar': 'üìä',
            'role': 'manager',
            'isOnline': True
        }
    ],
    'user': [
        {
            'id': 'general-support',
            'name': '–û–±—â–∞—è –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
            'description': '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—â—å',
            'avatar': 'üí¨',
            'role': 'user',
            'isOnline': True
        }
    ],
    'ved': [
        {
            'id': 'ved-bot-1',
            'name': '–í–≠–î –ë–æ—Ç 1',
            'description': '–ü–æ–º–æ—â—å —Å –≤–Ω–µ—à–Ω–µ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é',
            'avatar': 'üåç',
            'role': 'ved',
            'isOnline': True
        },
        {
            'id': 'ved-bot-2',
            'name': '–í–≠–î –ë–æ—Ç 2',
            'description': '–¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã',
            'avatar': 'üìã',
            'role': 'ved',
            'isOnline': True
        },
        {
            'id': 'ved-bot-3',
            'name': '–í–≠–î –ë–æ—Ç 3',
            'description': '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞',
            'avatar': 'üöö',
            'role': 'ved',
            'isOnline': False
        }
    ],
    'hr': [
        {
            'id': 'hr-bot-1',
            'name': 'HR –ë–æ—Ç 1',
            'description': '–ö–∞–¥—Ä–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã',
            'avatar': 'üë•',
            'role': 'hr',
            'isOnline': True
        },
        {
            'id': 'hr-bot-2',
            'name': 'HR –ë–æ—Ç 2',
            'description': '–û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞',
            'avatar': 'üéì',
            'role': 'hr',
            'isOnline': True
        }
    ]
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
active_connections: Dict[str, WebSocket] = {}

@router.get("/bots", response_model=List[BotResponse])
async def get_available_bots(
    role: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–æ–≤ –¥–ª—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = current_user.role.lower()
    bots = BOTS_DATA.get(user_role, [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏—Ö –±–æ—Ç–æ–≤
    general_bots = BOTS_DATA.get('user', [])
    bots.extend(general_bots)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    seen_ids = set()
    unique_bots = []
    for bot in bots:
        if bot['id'] not in seen_ids:
            seen_ids.add(bot['id'])
            unique_bots.append(bot)
    
    return unique_bots

@router.get("/history/{bot_id}", response_model=List[MessageResponse])
async def get_chat_history(
    bot_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±–æ—Ç–æ–º
    """
    print(f"[DEBUG] get_chat_history: bot_id={bot_id}, user_id={current_user.id}")
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    history = []
    # --- –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ë–î ---
    # –ñ—ë—Å—Ç–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è:
    if not isinstance(history, list):
        print(f"[ERROR] –ò—Å—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º: {history}")
        return JSONResponse(status_code=422, content={"detail": "–ò—Å—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º", "history": str(history)})
    valid_msgs = []
    for idx, msg in enumerate(history):
        if not isinstance(msg, dict):
            print(f"[ERROR] –≠–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ dict: idx={idx}, msg={msg}")
            continue
        if msg.get('role') not in ('user', 'assistant'):
            print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å: idx={idx}, msg={msg}")
            continue
        if not isinstance(msg.get('content'), str):
            print(f"[ERROR] content –Ω–µ —Å—Ç—Ä–æ–∫–∞: idx={idx}, msg={msg}")
            continue
        valid_msgs.append(msg)
    print(f"[DEBUG] –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(valid_msgs)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
    return valid_msgs

@router.post("/send", response_model=MessageResponse)
async def send_message(
    message: MessageCreate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    response_message = MessageResponse(
        id=f"msg_{datetime.now().timestamp()}",
        content=f"–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ {message.botId}: {message.content}",
        sender="bot",
        timestamp=datetime.now().isoformat(),
        botId=message.botId,
        userId=str(current_user.id)
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
    connection_key = f"{current_user.id}_{message.botId}"
    if connection_key in active_connections:
        try:
            await active_connections[connection_key].send_text(response_message.json())
        except:
            pass
    
    return response_message

@router.get("/sessions", response_model=List[ChatSessionResponse])
async def get_chat_sessions(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç-—Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    return []

@router.post("/sessions", response_model=ChatSessionResponse)
async def create_chat_session(
    session: SessionCreate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —á–∞—Ç-—Å–µ—Å—Å–∏—é —Å –±–æ—Ç–æ–º
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    new_session = ChatSessionResponse(
        id=f"session_{datetime.now().timestamp()}",
        userId=str(current_user.id),
        botId=session.botId,
        createdAt=datetime.now().isoformat(),
        lastActivity=datetime.now().isoformat(),
        messageCount=0
    )
    return new_session

@router.delete("/sessions/{session_id}")
async def delete_chat_session(
    session_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –£–¥–∞–ª–∏—Ç—å —á–∞—Ç-—Å–µ—Å—Å–∏—é
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    return {"message": "–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞"}

@router.get("/bots/{bot_id}/status")
async def get_bot_status(
    bot_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (–æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω)
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    return {"isOnline": True}

@router.websocket("/ws")
async def websocket_endpoint(
    websocket: WebSocket,
    token: str,
    bot_id: str
):
    """
    WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    await websocket.accept()
    
    # TODO: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
    user_id = "1"  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Ç–æ–∫–µ–Ω–∞
    connection_key = f"{user_id}_{bot_id}"
    
    active_connections[connection_key] = websocket
    
    try:
        while True:
            # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            message = json.loads(data)
            
            # TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
            
    except WebSocketDisconnect:
        # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        if connection_key in active_connections:
            del active_connections[connection_key]

@router.get("/unread")
async def get_unread_messages(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    return {
        "ved-bot-1": 0,
        "ved-bot-2": 1,
        "hr-bot-2": 3
    }

@router.post("/read/{bot_id}")
async def mark_messages_as_read(
    bot_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    return {"message": "–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"} 