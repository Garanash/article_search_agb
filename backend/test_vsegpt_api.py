#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VseGPT API –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
"""

import requests
import json
import sys

# VseGPT API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
VSEGPT_API_KEY = "sk-or-vv-0222bdfad78b2ee03399f91527fbd52b36793f8db856f1a7634f423ff6ec6b16"
VSEGPT_BASE_URL = "https://api.vsegpt.ru/v1"

def test_vsegpt_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VseGPT API"""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VseGPT API...")
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
        response = requests.get(f"{VSEGPT_BASE_URL}/models", timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"   ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.text}")
            return False
    except requests.exceptions.Timeout:
        print("   ‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        return False
    except requests.exceptions.ConnectionError:
        print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def test_api_key():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–ª—é—á"""
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç API –∫–ª—é—á–∞...")
    
    headers = {
        "Authorization": f"Bearer {VSEGPT_API_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
        response = requests.get(
            f"{VSEGPT_BASE_URL}/models",
            headers=headers,
            timeout=30
        )
        
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            models = response.json()
            print(f"   ‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üìã –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models.get('data', []))}")
            return True
        elif response.status_code == 401:
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_balance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å–∞...")
    
    headers = {
        "Authorization": f"Bearer {VSEGPT_API_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(
            f"{VSEGPT_BASE_URL}/balance",
            headers=headers,
            timeout=30
        )
        
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            balance = response.json()
            print(f"   ‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω")
            print(f"   üí∞ –ë–∞–ª–∞–Ω—Å: {balance}")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_chat_completion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    headers = {
        "Authorization": f"Bearer {VSEGPT_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "anthropic/claude-3-haiku",
        "messages": [
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."}
        ],
        "temperature": 0.7,
        "max_tokens": 100
    }
    
    try:
        response = requests.post(
            f"{VSEGPT_BASE_URL}/chat/completions",
            headers=headers,
            json=payload,
            timeout=60
        )
        
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            if 'choices' in result and len(result['choices']) > 0:
                content = result['choices'][0]['message']['content']
                print(f"   ü§ñ –û—Ç–≤–µ—Ç: {content[:100]}...")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_local_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π API"""
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API...")
    
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API
        response = requests.get("http://localhost:8000/api/chat/models", timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            print("   ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        elif response.status_code == 401:
            print("   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            return True  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API: {response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("   ‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("üß™ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ VseGPT API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_vsegpt_connection():
        print("\nüí• –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ VseGPT API")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–ª—é—á
    if not test_api_key():
        print("\nüí• –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å
    if not test_balance():
        print("\nüí• –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if not test_chat_completion():
        print("\nüí• –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π API
    test_local_api()
    
    print("\n" + "=" * 50)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üí° –ï—Å–ª–∏ —á–∞—Ç –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    print("   - –ó–∞–ø—É—â–µ–Ω –ª–∏ backend —Å–µ—Ä–≤–µ—Ä")
    print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    print("   - –ï—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ localStorage")

if __name__ == "__main__":
    main() 